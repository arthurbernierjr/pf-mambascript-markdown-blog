{"content":"<h1 id=\"expresslab\">Express Lab</h1>\n<p><br>\n<br></p>\n<p><br>\n<br></p>\n<h2 id=\"intro\">Intro</h2>\n<p>It's been a long day and you've covered a lot of ground.</p>\n<p>It's natural, in fact, <strong>expected</strong>, to feel \"uncomfortable\" and confused by Node.js &amp; Express at this point.</p>\n<p>As always, the journey toward competence requires practice - so let's get on with it!</p>\n<p><br>\n<br></p>\n<h2 id=\"exercise\">Exercise</h2>\n<p>The goal of the exercise is to do put in a rep doing everything that you did during the Express lesson!</p>\n<h4 id=\"thislabisadeliverable\">This lab is a deliverable</h4>\n<ol>\n<li>Build 10 Routes and a view engine, say anything you want</li>\n<li>Make 2 different templates, and use them both in different routes ( you can only have 1 view engine but multiple templates )</li>\n</ol>\n<h3 id=\"bonus\">Bonus</h3>\n<ol>\n<li>Dynamically add links to your view engine so you can make anchor tags to link your pages together, hmmm how would you do that ….. hint split , loop , you can figure it out, but it will take a lot of problem solving, you'll have to do more than change one line of code, but it will only take a few lines of code, <code>use an array or object</code> another hint.</li>\n</ol>\n<h2 id=\"superbonus\">Super Bonus</h2>\n<p>This is an advanced bonus that previews what we will soon learn in class, I didn't teach you any of this but your free to research it's not required at all…</p>\n<p>Create a route and view dedicated to displaying a single data resource, such as a single student.</p>\n<p>We refer to this as the <code>show</code> route/view, vs. the <code>index</code> route/view.</p>\n<p>The key to implementing this feature is <strong>route parameters</strong> documented in the <strong>Route parameters</strong> section of the <a href=\"https://expressjs.com/en/guide/routing.html\">Express Routing guide</a>.</p>\n<p>Basically, you can define a route as follows:</p>\n<pre><code class=\"javascript language-javascript\">// have some object with a bunch of students\n// edit your view engine as needed and don't copy this code\n// word for word, bar for bar, its just an idea\n\napp.get('/students/:id', function(req, res) {\n  console.log(`The value for the :id route parameter is: ${req.params.id}`);\n  res.render('students/show', { studentId: req.params.id, studentName: studentsObject[req.params.id].name });\n});\n</code></pre>\n<p>To send a matching route from the browser, you can use an html a tag that generates a hyperlink that looks like:</p>\n<pre><code class=\"html language-html\">&lt;a href=\"/students/ ##studentId##\"&gt;\n  Click for Details for Student ##studentName##&gt;\n&lt;/a&gt;\n</code></pre>","data":{"title":"w1d2","subTitle":"An Introduction to the world","excerpt":"God is Good 3 appears on Index Page","featureImage":"/img/illustration-editor-desktop.svg","date":"10/21/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/w1d2.md","_id":"w1d2"}