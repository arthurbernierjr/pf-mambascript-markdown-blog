{"content":"<h1 id=\"gitkeepingtrackoffiles\">Git - Keeping Track of Files</h1>\n<h2 id=\"lessonobjectives\">Lesson Objectives</h2>\n<ol>\n<li>Add an ssh key to your github account</li>\n<li>Describe what git is and what it does</li>\n<li>Explain the difference between git and other versioning tools</li>\n<li>Create a repository in github</li>\n<li>Clone that repository</li>\n<li>Stage Files</li>\n<li>Commit Files</li>\n<li>Push files</li>\n<li>Pull changes from remote repo</li>\n<li>Fork a repository</li>\n<li>Pull changes from original repo</li>\n<li>Create an issue for the original repository</li>\n<li>Create a pull request to original repository</li>\n<li>Create a branch</li>\n<li>Push a branch to the repo</li>\n<li>Merge a branch into another branch</li>\n</ol>\n<h2 id=\"addansshkeytoyourgithubaccount\">Add an ssh key to your github account</h2>\n<ul>\n<li>When you get tired of always entering your github password, you can use the ssh URL (as opposed to the https URL) when cloning a repo</li>\n<li>You'll need to also add what's called an ssh key to github https://help.github.com/articles/generating-an-ssh-key/</li>\n<li>Now you can use the ssh url when cloning instead of https</li>\n</ul>\n<ol>\n<li>go into ssh directory <code>cd ~/.ssh</code></li>\n<li>run key generator <code>ssh-keygen</code> and accept all default answers till complete</li>\n<li>This will generate two files, id<em>rsa and id</em>rsa.pub (check by doing <code>ls -la</code>)<ul>\n<li>id_rsa is your private key which you should never share</li>\n<li>id_rsa is your public key to share with places like github for logging in</li></ul></li>\n<li>Print you public key <code>cat id_rsa.pub</code></li>\n<li>Copy and paste the public key into github</li>\n</ol>\n<h2 id=\"describewhatgitisandwhatitdoes\">Describe what git is and what it does</h2>\n<ul>\n<li>Git is just a tool that allows you to move project specific files from your \"local\" (or personal) computer to another internet-connected computer which is acting as a central location for your code.  This other computer is called a \"remote repository.\"</li>\n<li>All other computers that want to contribute to this specific project, will use the same remote repository (central computer), but send files from their own local computers.</li>\n</ul>\n<h2 id=\"explainthedifferencebetweengitandotherversioningtools\">Explain the difference between git and other versioning tools</h2>\n<ul>\n<li>In the old days, people would use FTP (File Transfer Protocol) to send their files to central computer<ul>\n<li>The issue:<ol>\n<li>Two people (Person A, Person B) copy the same file from the remote repo at roughly the same time</li>\n<li>They both make changes</li>\n<li>Person A uploads their changes</li>\n<li>Person B uploads their changes, overwriting Person A's changes</li></ol></li></ul></li>\n<li>The next step was to create a locking mechanism<ul>\n<li>How it worked<ol>\n<li>Person A would \"check out\" a file (like in a library)</li>\n<li>Person B would not be able to check out that file until it was checked back in</li>\n<li>Person A would make changes to the file and then check it back in</li>\n<li>Person B could now check out that file</li></ol></li>\n<li>The issue<ul>\n<li>Person B would have to wait for person A to finish with a file to start work on it</li></ul></li></ul></li>\n<li>The next step was tools like CVS and SVN<ul>\n<li>How it worked<ol>\n<li>Both Person A and Person B could check out a file at the same time</li>\n<li>Person A modifies the file and checks it back in</li>\n<li>Person B modifies the file, tries to check it back in, but cannot</li>\n<li>Person B must re-check out the file that now includes the changes made by person A</li>\n<li>CVS/SVN will attempt to merge the changes together</li>\n<li>As long as the changes made by both Person A and Person B are on different lines, this will succeed</li>\n<li>Once the changes made by Person A have been merged with Person B's version of the file, Person B can now check in their file</li></ol></li>\n<li>The issue<ul>\n<li>If a person is not ready to check in a file, there is no way to keep track of the changes made to that file</li>\n<li>If something goes wrong before checking the file back in, the user must, figure out what happened, go through an almost endless number of Undo commands in their text editor, or revert their file to version that is in the repository.  A lot of work could be lost</li></ul></li></ul></li>\n<li>Git functions just like CVS and SVN, but it adds a local repository<ul>\n<li>This allows a user to keep a log of their local changes before finally pushing everything back to the remote repository</li>\n<li>The user can also travel \"back in time\" to previous states that have been saved locally, but not yet pushed to the remote repository.  This is great for when something goes wrong</li>\n<li>The process:<ol>\n<li>Add files whose changes you want to be logged</li>\n<li>Log the changes of the files that were added (called making a \"commit\")</li>\n<li>Once all commits have been made, and you're ready to send your changes to the remote repo<ol>\n<li>\"pull\" any changes that have been made to the repo since you last synced your local repo with the remote repo</li>\n<li>\"push\" your changes to the remote repo.</li></ol></li></ol></li></ul></li>\n</ul>\n<h2 id=\"createarepositoryingithub\">Create a repository in github</h2>\n<ol>\n<li>Go to https://github.com</li>\n<li>On the right click the green button that says \"New Repository\"</li>\n<li>Give the repo a name and click Create</li>\n</ol>\n<h2 id=\"clonethatrepository\">Clone that repository</h2>\n<ol>\n<li>Once you've created the repo, you'll be taken to repo page</li>\n<li>In the \"Quick setup\" section, copy and paste <strong>the SSH</strong> url</li>\n<li>Go to a suitable location in the terminal (let's do <code>~/development/</code>) and type <code>git clone</code> and paste the ssh url (e.g.<code>git clone git@github.com:mahuntington/asdfasdf.git</code>)</li>\n</ol>\n<h2 id=\"stagefiles\">Stage Files</h2>\n<p><code>cd</code> into the repo and use <code>ls -a</code> to check for a <code>.git</code> repo</p>\n<p>Now create <code>specific_file.txt</code> and make some changes to it.</p>\n<p>Once you've finished making changes for the moment, it's time to tell git which files need to have their changes logged</p>\n<ul>\n<li><code>git add specific_file.txt</code> will log all changes to the file specific_file.text</li>\n<li><code>git add .</code> will log the changes to all files in the current working directory</li>\n<li><code>git add some_dir/</code> will log the changes to all files in the some_dir directory</li>\n<li><code>git add -A</code> will add all files in the local repo that have been modified</li>\n</ul>\n<p>To see the status of which files are in the process of being committed use <code>git status</code></p>\n<h2 id=\"commitfiles\">Commit Files</h2>\n<p>Log the files, and give the log a description (or \"message\") so you can easily remember what was done</p>\n<ul>\n<li><code>git commit -m \"changed the database structure to allow for an email address for each user\"</code></li>\n<li>check your commits with <code>git log</code></li>\n</ul>\n<h2 id=\"pushfiles\">Push files</h2>\n<p>Push your changes to the remote repository</p>\n<ul>\n<li><code>git push origin master</code></li>\n<li>origin is the nickname of the remote repo.  Master is the name of the branch (covered later), this is usually master when you start out.</li>\n</ul>\n<h2 id=\"pullchangesfromremoterepo\">Pull changes from remote repo</h2>\n<p>Pull any changes others made to the repo into your local version of the repo</p>\n<ul>\n<li><code>git pull origin master</code></li>\n</ul>\n<h2 id=\"forkarepository\">Fork a repository</h2>\n<p>Open source software is popular because the source code for an open source application is available for viewing on the internet.  If you want to play around with the code of an open source app on github, you can simply fork the repo and make changes to it there.</p>\n<ol>\n<li>Find the unit repo on github</li>\n<li>In the upper right, click the <code>fork</code> button</li>\n<li>Choose which user (or organization if you belong to any) should create the duplicated repo</li>\n<li>Clone, add, commit, push as normal</li>\n</ol>\n<p>Submitting Homework (2-Steps):</p>\n<ul>\n<li>Submit link to pull request in github</li>\n</ul>\n<h1 id=\"javascriptoopinheritance\">JavaScript - OOP Inheritance</h1>\n<h2 id=\"lessonobjectives-1\">Lesson Objectives</h2>\n<ol>\n<li>Make a class inherit attributes from a \"parent class\"</li>\n<li>Create static properties for a class</li>\n<li>Create a factory</li>\n</ol>\n<h2 id=\"makeaclassinheritattributesfromaparentclass\">Make a class inherit attributes from a \"parent class\"</h2>\n<p>Sometimes we want to have a \"parent\" class that will have some basic attributes that will be inherited by \"child\" classes. Here is our parent class. But what if we have a super hero amongst us that has all our human attributes and more?</p>\n<pre><code class=\"javascript language-javascript\">class Person {\n    constructor(name, age, eyes, hair, lovesCats = true, lovesDogs) {\n        this.legs = 2;\n        this.arms = 2;\n        this.name = name;\n        this.age = age;\n        this.eyes = eyes;\n        this.hair = hair;\n        this.lovesCats = lovesCats;\n        this.lovesDogs = lovesDogs || true;\n    }\n    greet(otherPerson) {\n        console.log('hi ' + otherPerson + '!');\n    }\n    classyGreeting(otherClassyPerson) {\n        console.log('Howdy ' + otherClassyPerson.name + '!');\n    }\n    setHair(hairColor) {\n        this.hair = hairColor;\n    }\n    walk() {\n        console.log('I hate when my Segway is in the shop.');\n    }\n}\nconst supermanPerson = new Person('Clark Kent', 30, 'blue', 'black');\nconsole.log(supermanPerson);\n</code></pre>\n<p>We could just copy paste the above and add what we need, but that's not sticking to the principal of DRY. Instead we can <code>extend</code> our Person class for our superhero</p>\n<p>We can now add additional functionality:</p>\n<pre><code class=\"javascript language-javascript\">class SuperHero extends Person {\n    fly() {\n        console.log('Up up and away!');\n    }\n}\nconst superman = new SuperHero('Clark Kent', 30, 'blue', 'black');\nconsole.log(superman);\nsuperman.walk();\nsuperman.fly();\n</code></pre>\n<p>And we can override previous functionality:</p>\n<pre><code class=\"javascript language-javascript\">class SuperHero extends Person {\n    fly() {\n        console.log('Up up and away!');\n    }\n    greet(otherPerson) {\n        console.log(`Greetings Earthl- Oops, I mean ${otherPerson}`);\n    }\n}\nconst superman = new SuperHero('Clark Kent', 30, 'blue', 'black');\nsuperman.greet('Bob');\n</code></pre>\n<p>We can even reference the parent class' method and extend its original functionality:</p>\n<pre><code class=\"javascript language-javascript\">class SuperHero extends Person {\n    fly() {\n        console.log('Up up and away!');\n    }\n    greet(otherPerson) {\n        console.log('Greetings ' + otherPerson);\n    }\n    walk() {\n        super.walk();\n        this.fly();\n    }\n}\nconst superman = new SuperHero('Clark Kent', 30, 'blue', 'black');\nsuperman.walk();\n</code></pre>\n<p>This is most useful on the constructor:</p>\n<pre><code class=\"javascript language-javascript\">class SuperHero extends Person {\n    constructor(name, age, eyes, hair) {\n        super(name, age, eyes, hair);\n        this.superPowers = [\n            'flight',\n            'superhuman strength',\n            'x-ray vision',\n            'heat vision',\n            'cold breath',\n            'super-speed',\n            'enhanced hearing',\n            'nigh-invulnerability'\n        ];\n    }\n    fly() {\n        console.log('Up up and away!');\n    }\n    greet(otherPerson) {\n        console.log('Greetings ' + otherPerson);\n    }\n    walk() {\n        super.walk();\n        this.fly();\n    }\n}\nconst superman = new SuperHero('Clark Kent', 30, 'blue', 'black');\nconsole.log(superman);\n</code></pre>\n<p><code>super</code> is another special keyword/function. Try mispelling it - and you'll see it won't have the same functionality.</p>\n<h1 id=\"javascriptoopfactories\">JavaScript - OOP Factories</h1>\n<h2 id=\"lessonobjectives-2\">Lesson Objectives</h2>\n<ol>\n<li>Create a Factory</li>\n<li>Bonus - static properties for a class</li>\n</ol>\n<h2 id=\"createafactory\">Create a factory</h2>\n<ul>\n<li><p>Sometimes we need to have a factory object that will generate other objects</p></li>\n<li><p>The purpose of the factory is so it can control the creation process in some way</p></li>\n<li><p>This is usually a single object that exists throughout the program that performs a set of functions - also called a singleton</p>\n<p>Let's start with a car</p></li>\n</ul>\n<pre><code class=\"javascript language-javascript\">class Car {\n    constructor(maker, serialNumber) {\n        this.serialNumber = serialNumber;\n        this.maker = maker;\n    }\n    drive() {\n        console.log('Vroom Vroom');\n    }\n}\n\nconst newCar = new Car('Mazda', 12345);\nconsole.log(newCar);\n</code></pre>\n<p>Now let's make a factory class that will make cars for us.</p>\n<pre><code class=\"javascript language-javascript\">class Factory {\n    constructor(company) {\n        this.company = company;\n        this.cars = [];\n    }\n    generateCar() {\n        const newCar = new Car(this.company, this.cars.length);\n        this.cars.push(newCar);\n    }\n    findCar(index) {\n        return this.cars[index];\n    }\n}\nconst tesla = new Factory('Tesla');\ntesla.generateCar();\ntesla.generateCar();\ntesla.generateCar();\ntesla.generateCar();\nconsole.log(tesla);\nconsole.log(tesla.findCar(0));\n</code></pre>\n<p>Now we can easily create another new factory that produces its own cars</p>\n<pre><code class=\"js language-js\">const porche = new Factory('Porche');\nporche.generateCar();\nporche.generateCar();\nconsole.log(porche);\nconsole.log(porche.findCar(0));\n</code></pre>\n<h2 id=\"extra\">Extra</h2>\n<h3 id=\"createstaticpropertiesforaclass\">Create static properties for a class</h3>\n<p>Sometimes you want to define properties that pertain to the class as a whole, not the instance. This allows us to limit, somewhat, what the user of class can do.</p>\n<pre><code class=\"javascript language-javascript\">class Person {\n    static eyeColors() {\n        return ['blue', 'green', 'brown'];\n    }\n    // rest of class definition here...\n}\n// more code...\nconst superman = new SuperHero(\n    'Clark Kent',\n    30,\n    Person.eyeColors()[0],\n    'black'\n);\n</code></pre>\n<h2 id=\"connecttothepostgresrepl\">Connect to the Postgres REPL</h2>\n<pre><code>$ psql\n</code></pre>\n<h2 id=\"postgresreplcommands\">Postgres REPL Commands</h2>\n<p><code>\\q</code> Quit Database</p>\n<p><code>\\l</code> List Databases</p>\n<p><code>\\i</code> import <filename></p>\n<p><code>CREATE DATABASE database_name;</code> Create a database</p>\n<p><code>\\c database_name</code> Connect to a database</p>\n<p><code>\\d</code> Display Relations</p>\n<p><code>\\dt</code> List tables in database</p>\n<p><code>CTRL + C</code> Kill the current command</p>\n<p><code>CMD + K</code> Clears the screen</p>\n<h2 id=\"createatableinyourschema\">Create a Table in your schema</h2>\n<pre><code class=\"sql language-sql\">CREATE TABLE table_name (\n  id BIGSERIAL PRIMARY KEY,\n  column_2 INTEGER,\n  column_3 VARCHAR(255),\n  column_4 BOOLEAN,\n  column_5 INTEGER REFERENCES other_table(id)\n);\n</code></pre>\n<p><code>\\d table_name</code> View table column info</p>\n<h2 id=\"findallcolumnsandrowsinatable\">Find All Columns and Rows in a Table</h2>\n<pre><code class=\"sql language-sql\">SELECT * FROM &lt;table name&gt;;\n</code></pre>\n<p>The asterisk or star symbol (<code>*</code>) means all columns.</p>\n<p>The semi-colon (<code>;</code>) terminates the statement like a period in sentence or question mark in a question.</p>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">SELECT * FROM books;\nSELECT * FROM products;\nSELECT * FROM users;\nSELECT * FROM countries;\n</code></pre>\n<h2 id=\"findingthedatayouwant\">Finding the Data You Want</h2>\n<pre><code class=\"sql language-sql\">SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE &lt;condition&gt;;\n</code></pre>\n<h3 id=\"equalityoperator\">Equality Operator</h3>\n<p>Find all rows that a given value matches a column's value.</p>\n<pre><code class=\"sql language-sql\">SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE &lt;column name&gt; = &lt;value&gt;;\n</code></pre>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">SELECT * FROM contacts WHERE first_name = \"Andrew\";\nSELECT first_name, email FROM users WHERE last_name = \"Chalkley\";\nSELECT name AS \"Product Name\" FROM products WHERE stock_count = 0;\nSELECT title \"Book Title\" FROM books WHERE year_published = 1999;\n</code></pre>\n<h2 id=\"addingarowtoatable\">Adding a Row to a Table</h2>\n<p>Inserting a single row:</p>\n<pre><code class=\"sql language-sql\">INSERT INTO &lt;table&gt; VALUES (&lt;value 1&gt;, &lt;value 2&gt;, ...);\n</code></pre>\n<p>This will insert values in the order of the columns prescribed in the schema.</p>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">INSERT INTO users VALUES  (1, \"chalkers\", \"Andrew\", \"Chalkley\");\nINSERT INTO users VALUES  (2, \"ScRiPtKiDdIe\", \"Kenneth\", \"Love\");\n\nINSERT INTO movies VALUES (3, \"Starman\", \"Science Fiction\", 1984);\nINSERT INTO movies VALUES (4, \"Moulin Rouge!\", \"Musical\", 2001);\n</code></pre>\n<h2 id=\"updatingallrowsinatable\">Updating All Rows in a Table</h2>\n<p>An update statement for all rows:</p>\n<pre><code class=\"sql language-sql\">UPDATE &lt;table&gt; SET &lt;column&gt; = &lt;value&gt;;\n</code></pre>\n<p>The <code>=</code> sign is different from an equality operator from a <code>WHERE</code> condition. It's an <em>assignment operator</em> because you're assigning a new value to something.</p>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">UPDATE users SET password = \"thisisabadidea\";\nUPDATE products SET price = 2.99;\n</code></pre>\n<h2 id=\"updatingspecificrows\">Updating Specific Rows</h2>\n<p>An update statement for specific rows:</p>\n<pre><code class=\"sql language-sql\">UPDATE &lt;table&gt; SET &lt;column&gt; = &lt;value&gt; WHERE &lt;condition&gt;;\n</code></pre>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">UPDATE users SET password = \"thisisabadidea\" WHERE id = 3;\nUPDATE blog_posts SET view_count = 1923 WHERE title = \"SQL is Awesome\";\n</code></pre>\n<h2 id=\"removingdatafromallrowsinatable\">Removing Data from All Rows in a Table</h2>\n<p>To delete all rows from a table:</p>\n<pre><code class=\"sql language-sql\">DELETE FROM &lt;table&gt;;\n</code></pre>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">DELETE FROM logs;\nDELETE FROM users;\nDELETE FROM products;\n</code></pre>\n<h2 id=\"removingspecificrows\">Removing Specific Rows</h2>\n<p>To delete specific rows from a table:</p>\n<pre><code class=\"sql language-sql\">DELETE FROM &lt;table&gt; WHERE &lt;condition&gt;;\n</code></pre>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">DELETE FROM users WHERE email = \"andrew@teamtreehouse.com\";\nDELETE FROM movies WHERE genre = \"Musical\";\nDELETE FROM products WHERE stock_count = 0;\n</code></pre>\n<h3 id=\"patternmatching\">Pattern Matching</h3>\n<p>Placing the percent symbol (<code>%</code>) any where in a string in conjunction with the <code>LIKE</code> keyword will operate as a wildcard. Meaning it can be substituted by any number of characters, including zero!</p>\n<pre><code class=\"sql language-sql\">SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE &lt;column&gt; LIKE &lt;pattern&gt;;\n</code></pre>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">SELECT title FROM books WHERE title LIKE \"Harry Potter%Fire\";\nSELECT title FROM movies WHERE title LIKE \"Alien%\";\nSELECT * FROM contacts WHERE first_name LIKE \"%drew\";\nSELECT * FROM books WHERE title LIKE \"%Brief History%\";\n</code></pre>\n<h2 id=\"countingresults\">Counting Results</h2>\n<p>To count rows you can use the <code>COUNT()</code> function.</p>\n<pre><code class=\"sql language-sql\">SELECT COUNT(*) FROM &lt;table&gt;;\n</code></pre>\n<p>To count unique entries use the <code>DISTINCT</code> keyword too:</p>\n<pre><code class=\"sql language-sql\">SELECT COUNT(DISTINCT &lt;column&gt;) FROM &lt;table&gt;;\n</code></pre>\n<p>To count aggregated rows with common values use the <code>GROUP BY</code> keywords:</p>\n<pre><code class=\"sql language-sql\">SELECT COUNT(&lt;column&gt;) FROM &lt;table&gt; GROUP BY &lt;column with common value&gt;;\n</code></pre>\n<h2 id=\"calculatingaverages\">Calculating Averages</h2>\n<p>To get the average value of a numeric column use the <code>AVG()</code> function.</p>\n<pre><code class=\"sql language-sql\">SELECT AVG(&lt;numeric column&gt;) FROM &lt;table&gt;;\nSELECT AVG(&lt;numeric column&gt;) FROM &lt;table&gt; GROUP BY &lt;other column&gt;;\n</code></pre>\n<h2 id=\"orderingcolumns\">Ordering Columns</h2>\n<p>Ordering by a single column criteria:</p>\n<pre><code class=\"sql language-sql\">SELECT * FROM &lt;table name&gt; ORDER BY &lt;column&gt; [ASC|DESC];\n</code></pre>\n<p><code>ASC</code> is used to order results in ascending order.</p>\n<p><code>DESC</code> is used to order results in descending order.</p>\n<p>Examples:</p>\n<pre><code class=\"sql language-sql\">SELECT * FROM books ORDER BY title ASC;\nSELECT * FROM products WHERE name = \"Sonic T-Shirt\" ORDER BY stock_count DESC;\nSELECT * FROM users ORDER BY signed_up_on DESC;\nSELECT * FROM countries ORDER BY population DESC;\n</code></pre>\n<h2 id=\"settheory\">Set Theory</h2>\n<p>A set is a collection of things.</p>\n<h3 id=\"union\">Union</h3>\n<p>The <em>Union</em> of two sets combines their results; but, eliminates duplicate rows from the result set.</p>\n<h3 id=\"intersect\">Intersect</h3>\n<p>The <em>Intersection</em> between two sets only returns the records that are common from both SELECT statements.</p>\n<h3 id=\"except\">Except</h3>\n<p>This is when we want to find the results of one set OR the other but NOT the records that are in both sets.</p>\n<h2 id=\"sqljoins\">SQL Joins</h2>\n<p>The process of linking tables is called <em>JOINING</em> and SQL provides several kinds of joins, including:</p>\n<ul>\n<li>Inner</li>\n<li>Left</li>\n<li>Right</li>\n</ul>\n<h3 id=\"innerjoin\">Inner Join</h3>\n<p>This is the most common kind of SQL join.</p>\n<pre><code class=\"sql language-sql\">SELECT *\nFROM students\nJOIN states\nON students.state = states.abbr;\n</code></pre>\n<h3 id=\"leftjoin\">Left Join</h3>\n<pre><code class=\"sql language-sql\">SELECT *\nFROM students\nLEFT JOIN states\nON students.state = states.abbr;\n</code></pre>\n<h3 id=\"rightjoin\">Right Join</h3>\n<pre><code class=\"sql language-sql\">SELECT *\nFROM students\nRIGHT JOIN states\nON students.state = states.abbr;\n</code></pre>\n<h3 id=\"setupsequelize\">Setup Sequelize</h3>\n<pre><code class=\"js language-js\">// add the sequelize library … it’s a constructor function\nconst Sequelize = require('sequelize');\n\n// initialize or instantiate the library by creating a variable that is the connection to the database\nconst db = new Sequelize('database_name_here', {\n  dialect: 'postgres',\n  define: {\n    underscored: true,\n    returning: true\n  }\n});\n</code></pre>\n<h1 id=\"definingmanytomanyassociationsinsequelize\">Defining Many-to-Many Associations in Sequelize</h1>\n<p>Reference: <a href=\"http://docs.sequelizejs.com/en/latest/docs/associations/\">Sequelize docs on association</a></p>\n<p>Let’s say we have two models: <code>Films</code> and <code>Festivals</code></p>\n<p>We know that a film can be shown at many film festivals and that, conversely, a festival can show many films. This is what is known as a <strong>many-to-many relationship.</strong></p>\n<p>Knowing this, we can set up our associations:</p>\n<h2 id=\"1afilmcanbeshownatmanyfestivalsbelongstomany\">1. A film can be shown at many festivals - <code>belongsToMany</code></h2>\n<p>If a film can be shown at many festivals, we can say that it <em>belongs to many</em> festivals. In Sequelize, we can write this association as follows:</p>\n<p><code>Film.belongsToMany(Festival, {through: FestivalFilm} );</code></p>\n<p>When we use the method <code>belongsToMany</code>, Sequelize will create a join table for us holding the foreign keys of the source and target models that we specified. So, in our example above, Sequelize creates a join table for the source (<code>Film</code>)  and target (<code>Festival</code>). As we specified with the option <code>through</code>, the join table is named FestivalFilm, and it holds the  foreign keys <code>filmId</code> and <code>festivalId</code>.</p>\n<p>Furthermore, by using the method  <code>belongsToMany</code> , Sequelize will create a series of methods for us that we can use on any instance of the source model (remember, the source model is the model before the dot).</p>\n<p>So in our example above, we can now use the methods:</p>\n<ul>\n<li><code>film.getFestival</code></li>\n<li><code>film.setFestival</code></li>\n<li><code>film.addFestival</code></li>\n<li><code>film.addFestivals</code></li>\n</ul>\n<p>Here is an example where we are using the method <code>setFestival</code> to associate a festival with a film:</p>\n<pre><code>app.post('/filmFestival', function(req, res, next) {\n        Promise.all([\n            Film.create(req.body.film),\n            Festival.create(req.body.festival)\n        ])\n        .spread(function(film, festival) {\n                return film.setFestival(associatedFestival); // here we are using the method setFestival\n        })\n        .then(function(filmWithAssociatedFestival){\n                res.send(filmWithAssociatedFestival);\n        })\n        .catch(next)\n});\n</code></pre>\n<h2 id=\"2afestivalcanshowmanyfilmshasmany\">2. A festival can show many films - <code>hasMany</code></h2>\n<p>Conversely, we could choose instead to say that since a festival can show many films, it <em>has many</em> films. In Sequelize, we can write this association as follows:</p>\n<p><code>Festival.hasMany(Films)</code></p>\n<p>When we use the method <code>hasMany</code>, Sequelize will add a foreign key for our source to our target model. So, in our example above, Sequelize will add the foreign key <code>festival_id</code>  to the <code>Film</code>  model.</p>\n<p>Furthermore, by using the method  <code>hasMany</code>, Sequelize will create a series of methods for us that we can use on any instance of the source model (remember, the source model is the model before the dot).</p>\n<p>So in our example above, we can now use the methods:</p>\n<ul>\n<li><code>festival.getFilms</code></li>\n<li><code>festival.setFilms</code></li>\n</ul>\n<h2 id=\"someimportantaddendums\">Some important addendums:</h2>\n<ol>\n<li><p>You should not use use <code>belongsToMany</code> and <code>hasMany</code> together, because they do fundamentally different things in regards to SQL. In our film-festival example, you could say a <code>Festival.hasMany(Films)</code> or that a <code>Film.belongsToMany(Festival, {through: FestivalFilm} )</code> <strong>but you should never write both.</strong></p></li>\n<li><p>You can, however, declare 'symmetric associations' like so:</p>\n<p><code>Film.belongsToMany(Festival, { through: 'film_festival' })</code></p>\n<p><code>Festival.belongsToMany(Film, { through: 'film_festival' })</code></p>\n<p>or</p>\n<p><code>Film.hasMany(Review)</code></p>\n<p><code>Review.belongsTo(Film)</code></p>\n<p>Although the \"redundant\" association does nothing new vis-à-vis the SQL tables, it does mean that the other instance gets the \"magic\" methods.</p></li>\n<li><p>Finally, be cognizant of the difference between many-to-many and many-to-one relationships. Let’s imagine we have have a third model that represents film reviews. We could say that a film has many reviews, but not that a review belongs to many films. A review belongs to only one film. Therefore, reviews and films are a many-to-one relationship, not a many-to-many relationship.</p></li>\n</ol>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<ol>\n<li>Fork</li>\n<li>Clone</li>\n</ol>\n<h1 id=\"expressapireactcrud\">Express API - React CRUD</h1>\n<p><img src=\"StackArchitecture.png\" alt=\"\" /></p>\n<p>We've built the backend. Now it's time to build the frontend.</p>\n<p>In this project we are going to be using react to build a CRUD frontend to our items json api.</p>\n<pre><code class=\"sh language-sh\">cd express-api-react\nnpm install\n</code></pre>\n<p>Setup the database config:</p>\n<p>config/config.json</p>\n<pre><code class=\"sh language-sh\">{\n  \"development\": {\n    \"database\": \"items_app_development\",\n    \"dialect\": \"postgres\"\n  },\n  \"test\": {\n    \"database\": \"items_app_test\",\n    \"dialect\": \"postgres\"\n  },\n  \"production\": {\n    \"use_env_variable\": \"DATABASE_URL\",\n    \"dialect\": \"postgres\",\n    \"dialectOptions\": {\n      \"ssl\": true\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"sh language-sh\">npx sequelize-cli db:create\nnpx sequelize-cli db:migrate\nnpx sequelize-cli db:seed:all\n</code></pre>\n<p>Make sure the data exists:</p>\n<pre><code class=\"sh language-sh\">psql items_app_development\nSELECT * FROM \"Items\";\n</code></pre>\n<p>Make sure the tests pass:</p>\n<pre><code class=\"sh language-sh\">npx sequelize-cli db:create --env test\nnpm test\n</code></pre>\n<p>Run the server:</p>\n<pre><code class=\"sh language-sh\">npm start\n</code></pre>\n<p>Test the following routes in your browser:</p>\n<ul>\n<li>http://localhost:3000/api/items</li>\n<li>http://localhost:3000/api/items/3</li>\n</ul>\n<p>Now open a new tab in the terminal. Make sure you're inside the repo.</p>\n<p>Let's create our React app.</p>\n<pre><code class=\"sh language-sh\">cd express-api-react\nnpx create-react-app client\n</code></pre>\n<p>Let's start by adding [react router]():</p>\n<pre><code class=\"sh language-sh\">cd client\nnpm install react-router-dom\n</code></pre>\n<blockquote>\n  <p>Important: Notice how there are two package.json's one in the root of the repo for the server, and the other inside the client folder. Make sure you're inside the client folder. We want to install the react router package so we can use it for the react app.</p>\n</blockquote>\n<p>And now let's setup our app to use react router:</p>\n<p>client/index.js</p>\n<pre><code class=\"js language-js\">ReactDOM.render(\n  &lt;Router&gt;\n    &lt;App /&gt;\n  &lt;/Router&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre>\n<p>Cool. Now let's setup our routes.  A route will render an associated component. Below is the list:</p>\n<p><code>/</code> - the homepage, just display a welcome screen. It will render a Home component.</p>\n<p><code>/items</code> - the ability to see all items. It will render an Items component.</p>\n<p><code>/create-item</code> - the ability to create a new item. It will render an ItemCreate component.</p>\n<p><code>/items/:id</code> - the ability to see a specific item. It will render an Item component.</p>\n<p><code>/items/:id/edit</code> - the ability to edit an item. It will render an ItemEdit component.</p>\n<p>Let's start by creating our empty components:</p>\n<pre><code class=\"sh language-sh\">cd src\nmkdir components\ncd components\nmkdir routes\ntouch Home.jsx Item.jsx ItemCreate.jsx ItemEdit.jsx Items.jsx\n</code></pre>\n<p>Now let's create our routes:</p>\n<p>client/App.js</p>\n<pre><code class=\"js language-js\">import React from 'react'\nimport { Route, withRouter } from 'react-router-dom'\n\nimport Items from './components/routes/Items'\nimport Item from './components/routes/Item'\nimport ItemEdit from './components/routes/ItemEdit'\nimport ItemCreate from './components/routes/ItemCreate'\nimport Home from './components/routes/Home'\n\nconst App = props =&gt; (\n  &lt;React.Fragment&gt;\n    &lt;h3&gt;{props.location.state ? props.location.state.msg : null}&lt;/h3&gt;\n    &lt;Route exact path='/' component={Home} /&gt;\n    &lt;Route exact path='/items' component={Items} /&gt;\n    &lt;Route exact path='/create-item' component={ItemCreate} /&gt;\n    &lt;Route exact path='/items/:id' component={Item} /&gt;\n    &lt;Route exact path='/items/:id/edit' component={ItemEdit} /&gt;\n  &lt;/React.Fragment&gt;\n)\n\nexport default withRouter(App)\n</code></pre>\n<p>A simple Home component:\nsrc/components/routes/Home.jsx</p>\n<pre><code class=\"js language-js\">import React from 'react'\nimport Layout from '../shared/Layout'\n\nconst Home = () =&gt; (\n  &lt;Layout&gt;\n    &lt;h4&gt;Welcome to the items app!&lt;/h4&gt;\n  &lt;/Layout&gt;\n)\n\nexport default Home\n</code></pre>\n<p>Notice the Layout component. We are going to build the Layout component next. This is a shared component that we will re-use multiple times. Essentially, the Layout component is the shell of the web app we are building.</p>\n<p>Let's create our \"shared\" components. The idea of shared components is that anytime we have code that we would repeat in several components (a footer, a navbar, etc), we can wrap that code inside a component and import it in whenever needed.</p>\n<pre><code class=\"sh language-sh\">cd client/src/components\nmkdir shared\ntouch Layout.jsx Footer.jsx Nav.jsx\n</code></pre>\n<p>Let's start with the Layout component:</p>\n<p>components/shared/Layout.jsx</p>\n<pre><code class=\"js language-js\">import React from 'react'\n\nimport Nav from './Nav'\nimport Footer from './Footer'\n\nconst Layout = props =&gt; (\n  &lt;div&gt;\n    &lt;h1&gt;Items App&lt;/h1&gt;\n    &lt;Nav /&gt;\n\n    {props.children}\n\n    &lt;Footer /&gt;\n  &lt;/div&gt;\n)\n\nexport default Layout\n</code></pre>\n<blockquote>\n  <p>Note: We are using <code>props.children</code> here. <a href=\"https://reactjs.org/docs/react-api.html#reactchildren\">React Children</a> is a placeholder for which ever component calls the component that <code>props.children</code> is in. You will see this in action in a minute.</p>\n</blockquote>\n<p>Let's create our Nav component:</p>\n<p>components/shared/Nav.jsx</p>\n<pre><code class=\"js language-js\">import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst Nav = () =&gt; (\n  &lt;nav&gt;\n    &lt;NavLink to='/'&gt;Home&lt;/NavLink&gt;\n    &lt;NavLink to='/items'&gt;Items&lt;/NavLink&gt;\n    &lt;NavLink to='/create-item'&gt;Create Item&lt;/NavLink&gt;\n  &lt;/nav&gt;\n)\n\nexport default Nav\n</code></pre>\n<p>And the Footer component:</p>\n<p>components/shared/Footer.jsx</p>\n<pre><code class=\"js language-js\">import React from 'react'\n\nconst Footer = () =&gt; (\n  &lt;p&gt;© Copyright {new Date().getFullYear()}. All Rights Reserved.&lt;/p&gt;\n)\n\nexport default Footer\n</code></pre>\n<p>Let's make sure the app is working.</p>\n<pre><code class=\"sh language-sh\">cd express-api-react\nnpm start\n</code></pre>\n<p>Open a new tab in your terminal and run your client:</p>\n<pre><code class=\"sh language-sh\">cd client\nnpm start\n</code></pre>\n<p>Open your browser and test the route http://localhost:3001/. The Home component should render but the other links will not work yet because we haven't built them out yet.</p>\n<p>Cool. We are done with shared components for now.</p>\n<p>Now let's build the Items component.</p>\n<p>We will be making an axios call in the Items component to fetch all the Items from the server.</p>\n<p>Let's start by installing <a href=\"https://www.npmjs.com/package/axios\">axios</a>. Make sure you're in the client folder.</p>\n<pre><code class=\"sh language-sh\">cd client\nnpm install axios\n</code></pre>\n<blockquote>\n  <p>When you run <code>npm install axios</code>, make sure you're inside the client folder where the package.json exists.</p>\n</blockquote>\n<p>Now we can build the Items component:</p>\n<pre><code class=\"js language-js\">import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\n\nclass Items extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      items: []\n    }\n  }\n\n  async componentDidMount () {\n    try {\n      const response = await axios(`http://localhost:3000/api/items`)\n      this.setState({ items: response.data.items })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  render () {\n    const items = this.state.items.map(item =&gt; (\n      &lt;li key={item.id}&gt;\n        &lt;Link to={`/items/${item.id}`}&gt;{item.title}&lt;/Link&gt;\n      &lt;/li&gt;\n    ))\n\n    return (\n      &lt;&gt;\n        &lt;h4&gt;Items&lt;/h4&gt;\n        &lt;ul&gt;\n          {items}\n        &lt;/ul&gt;\n      &lt;/&gt;\n    )\n  }\n}\n\nexport default Items\n</code></pre>\n<p>Test the http://localhost:3001/items route in your browser.</p>\n<p>Good? Great. Let's move on to the Item component.</p>\n<p>components/routes/Item.jsx</p>\n<pre><code class=\"js language-js\">import React, { Component } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport axios from 'axios'\n\nimport Layout from '../shared/Layout'\n\nclass Item extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      item: null,\n      deleted: false\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await axios(`http://localhost:3000/api/items/${this.props.match.params.id}`)\n      this.setState({ item: response.data.item })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  destroy = () =&gt; {\n    axios({\n      url: `http://localhost:3000/api/items/${this.props.match.params.id}`,\n      method: 'DELETE'\n    })\n      .then(() =&gt; this.setState({ deleted: true }))\n      .catch(console.error)\n  }\n\n  render() {\n    const { item, deleted } = this.state\n\n    if (!item) {\n      return &lt;p&gt;Loading...&lt;/p&gt;\n    }\n\n    if (deleted) {\n      return &lt;Redirect to={\n        { pathname: '/', state: { msg: 'Item succesfully deleted!' } }\n      } /&gt;\n    }\n\n    return (\n      &lt;Layout&gt;\n        &lt;h4&gt;{item.title}&lt;/h4&gt;\n        &lt;p&gt;Link: {item.link}&lt;/p&gt;\n        &lt;button onClick={this.destroy}&gt;Delete Item&lt;/button&gt;\n        &lt;Link to={`/items/${this.props.match.params.id}/edit`}&gt;\n          &lt;button&gt;Edit&lt;/button&gt;\n        &lt;/Link&gt;\n        &lt;Link to=\"/items\"&gt;Back to all items&lt;/Link&gt;\n      &lt;/Layout&gt;\n    )\n  }\n}\n\nexport default Item\n</code></pre>\n<p>We should now be able to see http://localhost:3001/items/1.</p>\n<p>Next, we want to implement the ItemEdit and ItemCreate. Inside the ItemEdit component we will have a form to edit an item. And Inside the ItemCreate component we will have form to create an item. What if we could abstract those two forms into one? We can, so let's do that now by creating another shared component called ItemForm:</p>\n<pre><code class=\"sh language-sh\">cd components/shared/\ntouch ItemForm.jsx\n</code></pre>\n<p>components/shared/ItemForm.jsx</p>\n<pre><code class=\"js language-js\">import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst ItemForm = ({ item, handleSubmit, handleChange, cancelPath }) =&gt; (\n  &lt;form onSubmit={handleSubmit}&gt;\n    &lt;label&gt;Title&lt;/label&gt;\n    &lt;input\n      placeholder=\"A vetted item.\"\n      value={item.title}\n      name=\"title\"\n      onChange={handleChange}\n    /&gt;\n\n    &lt;label&gt;Link&lt;/label&gt;\n    &lt;input\n      placeholder=\"http://acoolitem.com\"\n      value={item.link}\n      name=\"link\"\n      onChange={handleChange}\n    /&gt;\n\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;Link to={cancelPath}&gt;\n      &lt;button&gt;Cancel&lt;/button&gt;\n    &lt;/Link&gt;\n  &lt;/form&gt;\n)\n\nexport default ItemForm\n</code></pre>\n<p>Awesome! Now let's build our ItemEdit component:</p>\n<p>components/routes/ItemEdit.jsx</p>\n<pre><code class=\"js language-js\">import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios'\n\nimport ItemForm from '../shared/ItemForm'\nimport Layout from '../shared/Layout'\n\nclass ItemEdit extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            item: {\n                title: '',\n                link: ''\n            },\n            updated: false\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await axios(`http://localhost:3000/api/items/${this.props.match.params.id}`)\n            this.setState({ item: response.data.item })\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    handleChange = event =&gt; {\n        const updatedField = { [event.target.name]: event.target.value }\n\n        const editedItem = Object.assign(this.state.item, updatedField)\n\n        this.setState({ item: editedItem })\n    }\n\n    handleSubmit = event =&gt; {\n        event.preventDefault()\n\n        axios({\n            url: `http://localhost:3000/api/items/${this.props.match.params.id}`,\n            method: 'PUT',\n            data: { item: this.state.item }\n        })\n            .then(() =&gt; this.setState({ updated: true }))\n            .catch(console.error)\n    }\n\n    render() {\n        const { item, updated } = this.state\n        const { handleChange, handleSubmit } = this\n\n        if (updated) {\n            return &lt;Redirect to={`/items/${this.props.match.params.id}`} /&gt;\n        }\n\n        return (\n            &lt;Layout&gt;\n                &lt;ItemForm\n                    item={item}\n                    handleChange={handleChange}\n                    handleSubmit={handleSubmit}\n                    cancelPath={`/items/${this.props.match.params.id}`}\n                /&gt;\n            &lt;/Layout&gt;\n        )\n    }\n}\n\nexport default ItemEdit\n</code></pre>\n<p>Let's test that. Open http://localhost:3001/items/1 and edit a field.</p>\n<p>Nice! Now try delete. Bye.</p>\n<p>Ok. We have one last CRUD action to complete in our react app - CREATE. Let's build the ItemCreat component and use our ItemForm shared component:</p>\n<p>components/routes/ItemForm.jsx</p>\n<pre><code class=\"js language-js\">import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios'\n\nimport apiUrl from '../../apiConfig'\nimport ItemForm from '../shared/ItemForm'\nimport Layout from '../shared/Layout'\n\nclass ItemCreate extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            item: {\n                title: '',\n                link: ''\n            },\n            createdItem: null\n        }\n    }\n\n    handleChange = event =&gt; {\n        const updatedField = { [event.target.name]: event.target.value }\n\n        const editedItem = Object.assign(this.state.item, updatedField)\n\n        this.setState({ item: editedItem })\n    }\n\n    handleSubmit = event =&gt; {\n        event.preventDefault()\n\n        axios({\n            url: `${apiUrl}/items`,\n            method: 'POST',\n            data: { item: this.state.item }\n        })\n            .then(res =&gt; this.setState({ createdItem: res.data.item }))\n            .catch(console.error)\n    }\n\n    render() {\n        const { handleChange, handleSubmit } = this\n        const { createdItem, item } = this.state\n\n        if (createdItem) {\n            return &lt;Redirect to={`/items`} /&gt;\n        }\n\n        return (\n            &lt;Layout&gt;\n                &lt;ItemForm\n                    item={item}\n                    handleChange={handleChange}\n                    handleSubmit={handleSubmit}\n                    cancelPath=\"/\"\n                /&gt;\n            &lt;/Layout&gt;\n        )\n    }\n}\n\nexport default ItemCreate\n</code></pre>\n<p>Great, test the create in your browser.</p>\n<p>We now have full CRUD complete on the backend and on the frontend.</p>\n<p>Success.</p>\n<h3 id=\"bonusrefactoring\">Bonus: Refactoring</h3>\n<p>Notice how we using the api url in multiple components. What would happen if we need to update the url, we would have to change it in several places. What if we could store the api url in one place and have it accessed from there? That way if we want to change the api url, we only change it in one place. We can do this!</p>\n<p>Let's create an apiConfig component:</p>\n<p>src/</p>\n<pre><code class=\"sh language-sh\">touch apiConfig.jsx\n</code></pre>\n<p>src/apiConfig.jsx</p>\n<pre><code class=\"js language-js\">let apiUrl\nconst apiUrls = {\n  production: 'https://sei-items-api.herokuapp.com/api',\n  development: 'http://localhost:3000/api'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n</code></pre>\n<p>Now replace all instances of http://localhost:3000/api in you Items, Item, ItemCreate, and ItemEdit components with <code>${apiUrl}</code> and don't forget to import the apiConfig component: <code>import apiUrl from '../../apiConfig'</code></p>\n<h2 id=\"deployingtoherokuandsurgehttpssurgesh\">Deploying to Heroku and <a href=\"https://surge.sh\">Surge</a></h2>\n<ol>\n<li><code>heroku create your-heroku-app-name</code></li>\n<li><code>heroku buildpacks:set heroku/nodejs</code></li>\n<li><code>heroku addons:create heroku-postgresql:hobby-dev --app=your-heroku-app-name</code></li>\n<li><code>git status</code></li>\n<li><code>git commit -am \"add any pending changes\"</code></li>\n<li><code>git push heroku master</code></li>\n<li><code>heroku run npx sequelize-cli db:migrate</code></li>\n<li><code>heroku run npx sequelize-cli db:seed:all</code></li>\n</ol>\n<blockquote>\n  <p>Having issues? Debug with the Heroku command <code>heroku logs --tail</code> to see what's happening on the Heroku server.</p>\n</blockquote>\n<p>Test the endpoints :)</p>\n<blockquote>\n  <p>https://your-heroku-app-name.herokuapp.com/api/users</p>\n  <p>https://your-heroku-app-name.herokuapp.com/api/users/1</p>\n</blockquote>\n<p>Cool the backend is now deployed! On to the frontend:</p>\n<p>First you will have to replace anywhere inside your react app where you made an axios call to localhost:3000 to https://your-heroku-app-name.herokuapp.com - if you completed the bonus that means you will only have to update the apiConfig.js file with https://your-heroku-app-name.herokuapp.com as the value for the production key.</p>\n<p>Now let's deploy the frontend:</p>\n<pre><code class=\"sh language-sh\">cd client\nnpm run build\ncd build\nmv index.html 200.html\nnpx surge\n</code></pre>\n<blockquote>\n  <p>Follow the prompts on Surge. Test the frontend routes once deployed. Getting errors? Check the browser dev tools. Check <code>heroku logs --tail</code></p>\n</blockquote>\n<p>Congrats! You built a full crud app with a backend and a frontend. You are now a fullstack developer!</p>\n<blockquote>\n  <p>✊ <strong>Fist to Five</strong></p>\n</blockquote>\n<h2 id=\"feedback\">Feedback</h2>\n<blockquote>\n  <p><a href=\"https://forms.gle/vgUoXbzxPWf4oPCX6\">Take a minute to give us feedback on this lesson so we can improve it!</a></p>\n</blockquote>","data":{"title":"W01D2","subTitle":"An Introduction to Functions in JavaScript (In Progress)","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/functions-the-first-frontier.png","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/git.md","_id":"git"}