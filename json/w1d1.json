{"content":"<h1 id=\"javascriptcallbacksandarrowfunctions\">JavaScript Callbacks and Arrow Functions</h1>\n<p><br>\n<br></p>\n<p>This material was meant to be a resource for students to refer to later, but we'll briefly introduce/review these concepts, so we're familiar with them.</p>\n<p><br>\n<br>\n<br>\n<br></p>\n<h3 id=\"whatsacallbackfunctionandwhenaretheyused\">What's a Callback Function and when Are They Used?</h3>\n<p><strong>A callback function, or \"callback\", is a function being passed to another function as an argument</strong></p>\n<p>Since you've already used the array <code>forEach</code> method before, you've already used a callback!</p>\n<p>Don't run the following, let's just read the code…</p>\n<p><br>\n<br></p>\n<pre><code class=\"javascript language-javascript\">const colors = ['red', 'green', 'blue'];\n\ncolors.forEach(function(color, idx) {\n  console.log(`${idx + 1} - ${color}`);\n});\n</code></pre>\n<p><br>\n<br></p>\n<p>In the above, the <em>anonymous inline function</em> being passed to <code>forEach</code> as its one and only argument - is a callback function.</p>\n<p>Of course, when a function takes a callback as input, it is likely doing so with the intention of invoking that callback at some point in time.</p>\n<blockquote>\n  <p>VOCAB:  In computer science, a function that accepts a function as input or returns a function is also known as a <em>higher order function</em>.</p>\n</blockquote>\n<p>In addition to using callbacks functions with forEach, you also used them when you added event listeners in your <code>Tic-Tac-Toe</code> game like so:</p>\n<p><br>\n<br></p>\n<pre><code class=\"javascript language-javascript\">gameboard.addEventListener('click', handleClick);\n</code></pre>\n<p><br>\n<br></p>\n<p>Now let's look at a more comprehensive example of how we can use callbacks by trying out this code:</p>\n<pre><code class=\"javascript language-javascript\">function add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nfunction compute(a, b, op) {\n  return op(a, b);\n}\n\nlet result1 = compute(10, 5, add);\nlet result2 = compute(10, 5, subtract);\n</code></pre>\n<p><br>\n<br></p>\n<p><strong>Review Question</strong></p>\n<p><strong>❓ When the add and subtract functions are passed as arguments to the compute function - they are ___ functions.</strong></p>\n<p>Also, note that we are passing named functions <code>(add&amp; sum)</code> instead of using an anonymous inline function like with the <code>forEach</code> earlier.</p>\n<h5 id=\"oneofthebestwaystolearnaboutcallbacksistofirstunderstandtheirusecases\">One of the best ways to learn about callbacks is to first understand their use-cases.</h5>\n<p><br>\n<br></p>\n<p><strong>Here are three use-cases for callback functions:</strong></p>\n<ol>\n<li><p>To provide a function to be called by a higher-order function such  as <code>forEach</code> or the <code>compute</code> function we wrote above.</p></li>\n<li><p>To provide a function to be executed each time an event happens - just like with the <code>addEventListener</code> example above.</p></li>\n<li><p>To provide a function to be executed when an <em>asynchronous</em> process has completed.</p></li>\n</ol>\n<p><br>\n<br>\n<br></p>\n<h3 id=\"usingcallbackswitharrayiteratormethods\">Using Callbacks with Array Iterator Methods</h3>\n<p>One of the most popular use-cases for callback functions is to provide them to iterator methods on arrays.</p>\n<p>As we've seen, calling the <code>forEach</code> method is a great way to iterate over all of the elements in an array.</p>\n<p>JavaScript has designed the <code>forEach</code> method to:</p>\n<ol>\n<li>Accept a callback function as an argument, and</li>\n<li>Invoke that callback once for each element in the array</li>\n</ol>\n<p>How many times would the anonymous callback function below be called?**:</p>\n<p><br>\n<br></p>\n<pre><code class=\"javascript language-javascript\">const flowers = ['rose', 'orchid', 'daisy'];\n\nflowers.forEach(function(flower, idx) {\n  console.log(`${idx + 1}) ${flower}`);\n});\n</code></pre>\n<p><br>\n<br>\n<br></p>\n<h3 id=\"usingcallbackswithasynchronousfunctions\">Using Callbacks with Asynchronous Functions</h3>\n<p><em>What's an \"asynchronous\" method?</em></p>\n<p>Before we can clearly understand what \"asynchronous\" means, it will help to confirm what <strong>synchronous</strong> code is.</p>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"synchronouscodeexecution\">Synchronous Code Execution</h4>\n<p>So far, most of the code we've written is <strong>synchronous</strong> code.</p>\n<p><strong>Synchronous</strong> code is when a line of code <strong>completely finishes executing</strong> before the next line of code runs.</p>\n<p>For example:</p>\n<p><br>\n<br></p>\n<pre><code class=\"javascript language-javascript\">const colors = ['red', 'green', 'blue'];\n\nconsole.log('BEFORE the forEach...');\n\ncolors.forEach(function(color, idx) {\n    console.log(`${idx + 1} - ${color}`);\n});\n\nconsole.log('AFTER the forEach...');\n</code></pre>\n<p>This is exactly what you would expect - right?</p>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"asynchronouscode\">Asynchronous Code</h4>\n<p>Unlike the synchronous code we saw above, the code following an <strong>asynchronous</strong> function call continues to run before the async function finishes.</p>\n<p>For example:</p>\n<p><br>\n<br></p>\n<pre><code class=\"javascript language-javascript\">console.log('Code before the asynchronous function call');\n\nsetTimeout(function() {\n  console.log('setTimeout code')\n});\n\nconsole.log('Code after the asynchronous function call');\n</code></pre>\n<blockquote>\n  <p>We use <code>setTimeout</code> to \"simulate\" asynchronous code.</p>\n</blockquote>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"whydoasynchronousfunctionsexist\">Why do Asynchronous Functions exist?</h4>\n<p>Asynchronous functions are necessary in JavaScript because JS runs on a single CPU thread dedicated to handling events, running your code, painting the screen, etc.</p>\n<p>Now imagine calling a function that gets data from a database. From the CPU point of view, the database will take an eternity to return the data.</p>\n<p>If the CPU were to wait until the data came back, nothing else could be done and the browser would freeze up!</p>\n<p>JavaScript avoids forcing the CPU to wait for \"long-running\" input/output operations, such as fetching data across the Internet.</p>\n<p>A good example of JavaScript's asynchronous programming model is the browser itself when it is fetching images as a page loads. The browser does not load one image at a time - that would be horrifically slow! Instead, it kicks off the requests for the images in parallel (at the same time).</p>\n<p>How does the browser know when an image has been retrieved and is ready to be painted? By implementing <strong>callbacks</strong> and something known as the <a href=\"https://www.youtube.com/watch?v=cCOL7MC4Pl0\">event loop</a> (in this video, Jake Archibald from Google does an amazing job demonstrating the browser's event loop).</p>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"usingcallbackstoworkwithasynchronouscode\">Using Callbacks to Work with Asynchronous Code</h4>\n<p>JavaScript provides two ways to run a function <strong>after</strong> an asynchronous operation completes its long running process:</p>\n<ul>\n<li><strong>Callbacks</strong></li>\n<li><strong>Promises</strong></li>\n</ul>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"asimulatedasynchronousexample\">A Simulated Asynchronous Example</h4>\n<p>The <code>getFriends()</code> function below is <em>synchronous</em>. It returns an array of friends immediately when invoked, and everything works just peachy:</p>\n<pre><code class=\"javascript language-javascript\">// Synchronous function\nfunction getFriends() {\n  return ['Fred', 'Barney'];\n}\n\n// Get the friends\nlet friends = getFriends();\n\n// The friends array is ready to work with because getFriends\n// is synchronous and returned the array of friends we wanted\nfriends.forEach(function(friend) {\n  console.log(friend);\n});\n</code></pre>\n<p>Now let's use a <code>setTimeout</code> within <code>getFriends()</code> to simulate a long-running asynchronous function (as if we were fetching the data across a network):</p>\n<pre><code class=\"javascript language-javascript\">// asynchronous function\nfunction getFriendsAsync() {\n  // Using setTimeout to make getFriendsAsync\n  // behave like a long-running database operation\n  setTimeout(function() {\n    return ['Fred', 'Barney'];\n  }, 0);\n}\n\n// Will friends have an array after this line of code runs?\nlet friends = getFriendsAsync();\n\n// The following will cause an error because\n// friends is not an array yet\nfriends.forEach(function(friend) {\n  console.log(friend);\n})\n</code></pre>\n<p><br>\n<br></p>\n<p>Running the above code will generate an error because the <code>friends</code> variable will not be an array of data before we call <code>forEach</code> on it.</p>\n<p>What's a programmer to do?</p>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"callbackstotherescue\">Callbacks to the Rescue</h4>\n<p>We're going to make it possible to work with the <code>getFriendsAsync</code> function by refactoring it to accept a callback function as follows:</p>\n<pre><code class=\"javascript language-javascript\">// Refactor to accept a callback function\n// to be called when the data is ready\nfunction getFriendsAsync(cb) {\n  setTimeout(function() {\n    // pass the results to the provided callback\n    cb(['Fred', 'Barney']);\n  }, 0);\n}\n\n// Execute and provide it with an anonymous callback function\n// to be called by the getFriendsAsync function\ngetFriendsAsync(function(friends) {\n  friends.forEach(function(friend) {\n    console.log(friend);\n  });\n});\n</code></pre>\n<p><br>\n<br></p>\n<p>The <code>getFriendsAsync</code> function has been refactored to accept a callback function, which it invokes at the appropriate time - in this case, when the <code>setTimeout</code> times out.</p>\n<p>Note how <code>getFriendsAsync</code> calls the callback passed to it and provides it with the array of friends as an argument - good stuff!  This is a common pattern when calling an asynchronous process.</p>\n<p>Functions that are asynchronous must be <strong>designed</strong> to either:</p>\n<ul>\n<li>Accept a callback function, or</li>\n<li>Return a promise</li>\n</ul>\n<hr>\n<p><br>\n<br></p>\n<h3 id=\"introtoarrowfunctions\">Intro to Arrow Functions:</h3>\n<p>Arrow functions have a more terse syntax than regular functions (<code>function</code> keyword)</p>\n<pre><code class=\"javascript language-javascript\">// regular function\nlet squares = [1, 2, 3].map(function (x) { return x * x });\n// arrow function\nlet squares = [1, 2, 3].map(x =&gt; x * x);\n</code></pre>\n<p><br>\n<br>\n<br></p>\n<h4 id=\"asingleparameterneednotbewrappedinparens\">A single parameter need not be wrapped in parens:</h4>\n<pre><code class=\"javascript language-javascript\">x =&gt; { ... }  // one parameter\n() =&gt; { ... }  // no parameters\n(x, y) =&gt; { ... }  // two or more parameters\n</code></pre>\n<p><br>\n<br></p>\n<h4 id=\"thestatementblockofanarrowfunctionbehavesjustlikethatofaregularfunction\">The statement block of an arrow function behaves just like that of a regular function:</h4>\n<pre><code class=\"javascript language-javascript\">const getGrade = score =&gt; {\n  if (score === 100) return 'A+';\n  score = Math.floor(score / 10);\n  return ['F', 'F', 'F', 'F', 'F', 'F', 'D', 'C', 'B', 'A'][score];\n};\n</code></pre>\n<p><br>\n<br></p>\n<h4 id=\"iftheresonlyasingleexpressionnotastatementcurlybracesareoptional\">If there's only a single <strong>expression</strong> (not a statement), curly braces are optional:</h4>\n<pre><code class=\"javascript language-javascript\">const logThis = () =&gt; { console.log(this) };\nconst logThis = () =&gt; console.log(this);\n</code></pre>\n<p><br>\n<br></p>\n<h4 id=\"arrowfunctionswillimplicitlyreturntheresultofanexpressionwithoutablockbraces\">Arrow functions will implicitly return the result of an <strong>expression</strong> without a block (braces):</h4>\n<pre><code class=\"javascript language-javascript\">const add = (x, y) =&gt; { return x + y };\n\n// Ideal single-statement arrow function\nconst add = (x, y) =&gt; x + y;\n\n// Returns undefined (blocks are like reg functions)\nconst add = (x, y) =&gt; { x + y };\n\n// Syntax error, must be an expression\nconst add = (x, y) =&gt; return x + y;\n</code></pre>\n<p><br>\n<br></p>\n<h4 id=\"toimplicitlyreturnajsobjectwrapitinparenstoavoidthecurlybracesoftheobjectbeinginterpretedasastatementblock\">To implicitly return a JS object, wrap it in parens to avoid the curly braces of the object being interpreted as a statement block:</h4>\n<pre><code class=\"javascript language-javascript\">let todos = ['Buy milk', 'Mow lawn'];\n\n// Below line of code won't work - looks like a statement block\n// let todoObjects = todos.map(todo =&gt; {todo: todo, done: false});\n\n// Wrap the implicit returned object in parens\nlet todoObjects = todos.map(todo =&gt; ({todo: todo, done: false}));\n</code></pre>\n<p><br>\n<br></p>\n<h4 id=\"allarrowfunctionsareexpressionstheresnosuchthingasanarrowfunctiondefinitiondeclaration\">All arrow functions are expressions.  There's no such thing as an arrow function definition/declaration.</h4>\n<pre><code class=\"javascript language-javascript\">// Nope, syntax error (no declarations for arrow functions)\nadd(x, y) =&gt; x + y;\n\n// This is what you want - a function expression\nconst add = (x, y) =&gt; x + y;\n</code></pre>\n<p><br>\n<br>\n<br>\n<br></p>\n<p><strong>Review Question</strong></p>\n<p><br></p>\n<p><strong>❓ In your own words describe what the term \"implicit return\" means.</strong></p>\n<p><br>\n<br>\n<br></p>\n<h3 id=\"resources\">Resources</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\">MDN | Callback Function</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN | Arrow Function Expression</a></p>","data":{"title":"w1d1","subTitle":"An Introduction to the world","excerpt":"God is Good 3 appears on Index Page","featureImage":"/img/illustration-editor-desktop.svg","date":"10/21/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/w1d1.md","_id":"w1d1"}