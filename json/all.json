[{"content":"<p><img src=\"/img/mamba.gif\" alt=\"function\" /></p>\n<h1 id=\"explanation\">Explanation</h1>\n<h2 id=\"whyshouldicareaboutthisijustwanttoknowreact\">Why Should I care about this I just want to know REACT</h2>\n<ul>\n<li>JavaScript Functions are incredibly versatile and in javascript they are what's known as\nfirst class citizens meaning they can be passed around like any other object.</li>\n<li>Functions are literally objects in JS the same way Arrays are as you learned yesterday.</li>\n<li>We will be using Functions everyday in JavaScript so you will learn more and more about them daily through repitition.</li>\n</ul>\n<h2 id=\"setup\">Setup</h2>\n<p>make a file <code>functions.js</code></p>\n<p>Test that a console.log will appear in Terminal when you run the file.</p>\n<pre><code>$ node functions.js\n</code></pre>\n<h2 id=\"whatisafunction\">What is a function?</h2>\n<pre><code class=\"javascript language-javascript\">// 2 ways of creating functions\n\n// function declaration\n     function one () {\n         return 'one'\n     }\n     one()\n\n // function expression\n     const two = () =&gt; {\n         return 2\n     }\n     const shotenedTwo = () =&gt; 2\n</code></pre>\n<h2 id=\"describewhyweusefunctions\">Describe why we use functions</h2>\n<p>Using functions is another application of DRY. Don't Repeat Yourself. With a function, you can store code that can be used conveniently as many times as you wish, without having to rewrite the code each time.</p>\n<h1 id=\"demonstration\">Demonstration</h1>\n<h2 id=\"definingafunction\">Defining a function</h2>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<p>Always use <strong><code>const</code></strong> to declare your functions. It would be a strange day when a function would need to be reassigned.</p>\n<p>The code will not run yet. The function needs to be <strong>invoked</strong>.</p>\n<h2 id=\"invokeafunction\">Invoke a function</h2>\n<p>Use one line of code to run multiple lines of code</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n</code></pre>\n<p>Simply use the name of the variable and use <strong>parentheses</strong> to invoke the function.</p>\n<p>If the parentheses are not included, the function will not run.</p>\n<p>The invocation comes <strong>after</strong> the function definition. If you write it beforehand, it will be trying to invoke something that doesn't yet exist according to the interpreter.</p>\n<p>This will work:</p>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n\nprintBoo();\n</code></pre>\n<p>VS</p>\n<p>This will not:</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n\nconst printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<h1 id=\"imitation\">Imitation</h1>\n<h2 id=\"codealong\">Code Along</h2>\n<ul>\n<li>Write a function <code>printSum</code> that will console.log the result of 10 + 10</li>\n</ul>\n<p><strong>Extra Reps</strong></p>\n<ul>\n<li><p>Write a function <code>printTriangle</code> that will print these pound signs to the console (there are 5 console.logs inside the function):</p>\n<pre><code>#\n##\n###\n####\n#####\n</code></pre></li>\n<li><p>Make it so that <code>printTriangle</code> will print the pound signs using a for loop (there is a for loop and only 1 console.log inside the function).  </p></li>\n<li><p>Make it so that when you can invoke the function with the number of pound signs to print (not just hardcoded to print 5)</p></li>\n</ul>\n<h2 id=\"properlynameafunction\">Properly name a function</h2>\n<p>The variable you use for a function should contain a <strong>verb</strong>. Functions <strong>do</strong> something, most often:</p>\n<ul>\n<li>getting data</li>\n<li>setting data</li>\n<li>checking data</li>\n<li>printing data</li>\n</ul>\n<p>If the purpose of your function is to check data, for example, use the verb <code>check</code> in the variable name.</p>\n<p>Example function that contains a conditional:</p>\n<pre><code class=\"javascript language-javascript\">const checkInputLength = (input) =&gt; {\n    if (input.length &gt; 10) {\n        console.log('input length is greater than 10');\n    } else {\n        console.log('input length is not greater than 10');\n    }\n};\n</code></pre>\n<ol>\n<li>A Function name should always start with a verb</li>\n<li>A function if possible should be pure meaning it shouldn't effect anything outside of itself</li>\n<li>If it does effect something outside of itself you should let the resder of the function know that by the name for example we could have a function that checks if something is or isn't something</li>\n<li>we could also have a function that changes something or <strong>Mutates</strong> something like when you are playing a video game and you score a point, the function that updates the score could be called updateScore or setScore or changeScore</li>\n<li>Functions should try to do <strong>only one thing</strong> If a function, called <code>checkInputLength</code>, does more than just check input, then it is a poor function.</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">    // function that mutates\n    const ricMershon = {\n    age: 21\n    }\n    const scottDraper = {\n    age: 25\n    }\n\n    const increaseAge = (person) =&gt; {\n      person.age += 1\n      console.log (`Horray it's your ${person.age} birthday`)\n    }\n</code></pre>\n<p>Takeaway: Think about appropriate <strong>verbs</strong> to use in your function variable names. The verbs should indicate the <strong>one thing</strong> that the function does.</p>\n<h2 id=\"writeanarrowfunctionwithaparameter\">Write an arrow function with a parameter</h2>\n<p>The preceding function, <code>checkInputLength</code> had a <strong>parameter</strong> called <code>input</code>.</p>\n<p>Functions can receive input that modify their behavior a bit.  This input is called a <strong>parameter</strong>.</p>\n<p>In the below example, the parameter is arbitrarily called <code>name</code>. We can call our parameters whatever we want - whatever makes semantic sense.</p>\n<p>Using <strong>concatenation</strong> I can put the input into a string:</p>\n<pre><code class=\"javascript language-javascript\">const sayName = (name) =&gt; {\n    console.log('Hello! My name is ' + name);\n}\n</code></pre>\n<p>When we <em>invoke</em> the function, we can specify the value of the parameter, this is called an <strong>argument</strong>:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Frodo\");\n</code></pre>\n<p>We can continue to invoke the function with whatever <strong>arguments</strong> we want:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Merry\");\nsayName(\"Pippin\");\nsayName(\"Sam\");\n</code></pre>\n<p>Each time, the output of the function will change to reflect the argument.</p>\n<h3 id=\"argumentvsparameter\">Argument vs Parameter</h3>\n<p>The <strong>argument</strong> is the input, the <strong>parameter</strong> is how the input is represented in the function.</p>\n<pre><code class=\"javascript language-javascript\">const func = (PARAMETER) =&gt; {\n    // some code\n}\n\nfunc(ARGUMENT);\n</code></pre>\n<h2 id=\"writeanarrowfunctionwithmultipleparameters\">Write an arrow function with multiple parameters</h2>\n<p>A function can take any number of parameters.</p>\n<pre><code class=\"javascript language-javascript\">const calculateArea = (num1, num2) =&gt; {\n    console.log(num1 * num2);\n}\n</code></pre>\n<p>When you invoke the function, you generally want to supply the right number of arguments.</p>\n<pre><code class=\"javascript language-javascript\">calculateArea(4, 4)\n</code></pre>\n<blockquote>\n  <p>=&gt; 16</p>\n</blockquote>\n<h2 id=\"howdoesthisworkakatheexecutioncontextinterviewquestionanswer\">How does this work? Aka (The Execution Context Interview Question Answer)</h2>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\n</code></pre>\n<p>so in our code we have now created a variable myNum on line 1  that is equal to 2 and then created\na variable called sqaure that is equal to the function we created.</p>\n<p>JavaScript does 3 super awesome things that makes it a great very first programming language, and that makes\nit elegant enough to be used by developers with decades of experience.</p>\n<p>We will go over those things as we go through this course but what pertains to us is the awesome feature of the\nJavaScript being single threaded and reading code line by line and executing code only when you ask it to.</p>\n<p>So in JS when it comes to what's running in our code we are never too confused if we remember JS goes line by\nline and 1 at a time.</p>\n<p>And we keep track of this in what's called our Execution Context\n<img src=\"https://media.git.generalassemb.ly/user/15881/files/d4842a00-3df3-11ea-909c-33a0a198c451\" alt=\"js engine 1\" /></p>\n<p>So when the JS Engine looks at our code it will start at the top and perform each operation line by line</p>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/d77f1a80-3df3-11ea-90dd-edd3b3f119ef\" alt=\"js engine 2\" /></p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\n</code></pre>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/db12a180-3df3-11ea-8acb-33e15c196cf3\" alt=\"js engine 3 updated\" /></p>\n<p>So as you can see when we call a function we go ahead and add it to the stack of things that we want JS to\ndo. Once JS has finished that task it goes back to the main code on the next line and runs again.</p>\n<p>So once square has completed running it will give us a value and assign it to ans</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\nconsole.log(\"Hello World\")\n</code></pre>\n<p>what order will this happen</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconsole.log(\"Hello World\")\nconst ans = square(myNum)\n</code></pre>\n<p>what about this?</p>\n<h2 id=\"breakaproblemdownintosteps\">Break a problem down into steps</h2>\n<p>Write a function that will <strong>return</strong> true if a word is a Palindrome, or will <strong>return</strong> false if not.</p>\n<ul>\n<li>Problem solve one step at a time</li>\n<li>Each step might require research</li>\n</ul>\n<p>Work in layers, one layer at a time. Don't jump ahead until each piece has been tested and works.</p>\n<p>Determine if each step will require research, and research it.</p>\n<ul>\n<li>reverse the word (how?)</li>\n<li>check if the word is the same as the reverse (how?)</li>\n<li>return true or false</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples:\n    //   palindrome(\"racecar\") === true\n    //   palindrome(\"abcdefghijklmnop\") === false\n</code></pre>\n<h1 id=\"practice\">Practice</h1>\n<h2 id=\"exercises\">Exercises</h2>\n<ul>\n<li><p>Write a function called square that takes in a number and squares it and then assign the result to variable called ans\n<code>javascript\n    square(5); // 25\n</code></p></li>\n<li><p>Write a function called <code>minusOne</code> that takes a parameter <code>num</code>. Assuming the argument is a number, print the argument -1.</p>\n<pre><code class=\"javascript language-javascript\">minusOne(10);        // 9\nminusOne(100);       // 99\nminusOne(Infinity);  // Infinity\n</code></pre></li>\n<li><p>Write a function <code>makeSentence</code> that takes <strong>three</strong> parameters and <strong>concatenates</strong> them into a fully formed sentence.</p>\n<pre><code class=\"javascript language-javascript\">makeSentence('I', 'want', 'chimichangas');\n</code></pre>\n<blockquote>\n  <p>=&gt; 'Oh boy, do I want chimichangas or what?'</p>\n</blockquote></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function called <code>getLastElement</code> that takes a parameter <code>arr</code>.</p></li>\n<li><p>Invoke the function with an <strong>array</strong> as the argument.</p></li>\n<li><p>The function should print the <strong>last element</strong> within the array.</p>\n<pre><code class=\"javascript language-javascript\">getLastElement([1, 2, 3, 4, 5, 6]);       // 6\ngetLastElement(['a', 'b', 'c']);          // 'c'\ngetLastElement([[1, 2, 3], [4, 5, 6]]);   // [4, 5, 6]\n</code></pre>\n<p><em>Hint:</em> <code>arr[arr.length - 1]</code></p></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function <code>divideThreeNums</code> that takes <strong>three</strong> parameters and prints the third parameter divided by the result of the second parameter divided by the first.</p>\n<pre><code class=\"javascript language-javascript\">divideThreeNums(10, 5, 2)   // 4\ndivideThreeNums(30, 2, 9)   // 135\n</code></pre></li>\n</ul>\n<h3 id=\"exercisesakaexamplewhiteboardquestionsforjuniordevs\">Exercises ( aka example whiteboard questions for junior devs)</h3>\n<ul>\n<li>Write a function that accepts a string.  The function should capitalize the first letter of each word in the string then\nreturn the capitalized string.</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples\n    //   capitalize('a short sentence') --&gt; 'A Short Sentence'\n    //   capitalize('a lazy fox') --&gt; 'A Lazy Fox'\n    //   capitalize('look, it is working!') --&gt; 'Look, It Is Working!'\n</code></pre>\n<ul>\n<li><p>Write a function that takes three parameters (numbers), sums them, converts the sum into a string and returns the string (eg. <code>\"123\"</code>)</p>\n<ul>\n<li>Use your google-fu to research converting a number into a string</li>\n<li>Invoke the function a couple of times with different arguments each time</li></ul></li>\n<li><p>Experiment</p>\n<ul>\n<li>What happens if you supply more arguments than there are parameters?</li>\n<li>What happens if you supply fewer arguments than there are parameters?</li></ul></li>\n</ul>","data":{"title":"Functions The First Frontier","subTitle":"An Introduction to Functions in JavaScript (In Progress)","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/functions-the-first-frontier.png","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/functions-the-first-frontier.md","_id":"functions-the-first-frontier"},{"content":"<h1 id=\"homeworkthefirst\">Homework, The First</h1>\n<p>Your first homework!!!!</p>\n<h4 id=\"learningobjectives\">Learning Objectives</h4>\n<ul>\n<li>Solidify JS fundamental concepts by answering short answer questions</li>\n<li>Practice using Boolean expressions</li>\n<li>Practice reading code/improving code literacy with while loops/infinite loops</li>\n<li>Practice writing for loops</li>\n<li>Practice using the terminal<ul>\n<li>create files, move files, copy files, remove files</li>\n<li>create directories, move directories, remove directories</li></ul></li>\n</ul>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>An introduction to JavaScript</li>\n<li>An introduction to Terminal</li>\n</ul>\n<hr />\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<ol>\n<li>Create a folder named <code>first_homework</code> somewhere convienent, like your <code>Desktop</code></li>\n<li>Create a file inside that folder called <code>first_js_homework.js</code></li>\n<li>Create a file inside that folder called <code>terminal_homework.bash</code></li>\n</ol>\n<h2 id=\"deliverables\">Deliverables</h2>\n<p>Answer the questions, write some code and submit the files via slack (see instructions at the bottom). Note: there are <strong>5 Sections</strong> in this homework</p>\n<h2 id=\"technicalrequirements\">Technical Requirements</h2>\n<ol>\n<li>The JavaScript file <strong>MUST</strong> run without syntax errors. If there are errors you can't solve, comment them out and leave a comment above explaining what is wrong</li>\n<li>The bash file should just be the commands you ran, copy and pasted into the file. A template is provided in the file <code>first_hw_bash_instructions.bash</code>, you can copy and paste that into your file and add your commands below each comment</li>\n</ol>\n<h2 id=\"submissionguidelines\">Submission Guidelines</h2>\n<ul>\n<li>Must be submitted before the next class day, (ie no later than 10am EST) - if you have problems submitting reach out ~15 minutes before the start of class</li>\n<li>Tonight we'll be submitting via <code>slack</code>, since we don't have our github set up completely. See instructions below</li>\n</ul>\n<h3 id=\"resources\">Resources</h3>\n<ul>\n<li>Review the class notes and your work from today</li>\n<li><a href=\"../../../../../wiki/Terminal-Cheatsheet\">Terminal Cheatsheet</a></li>\n</ul>\n<hr>\n<h3 id=\"section1\">Section 1</h3>\n<h4 id=\"terms\">Terms</h4>\n<p>For any answers that require a written response, write the response as commented-out code</p>\n<pre><code class=\"js language-js\">// 1. The difference between interpolation and\n// concatentation is . . .\n</code></pre>\n<p>Write these answers in <code>first_js_homework.js</code></p>\n<p><strong>Remember:</strong></p>\n<ul>\n<li>Run your file by typing <code>node first_js_homework.js</code></li>\n<li>Then, press the <strong>up arrow</strong> to retrieve the <code>node first_js_homework.js</code> command after you have used it the first time, instead of typing it out every single time</li>\n</ul>\n<p><strong>Answer:</strong></p>\n<ol>\n<li><p>What does the acronym <strong>DRY</strong> stand for? Why should we pay attention to it? What programming tools have we learned to write <strong>DRY</strong> code?</p></li>\n<li><p>What is the difference between <code>const</code> and <code>let</code> and <code>var</code>? Please limit your answer to no more than three short sentences. Don't be afraid to <strong>research</strong> using google and other resources</p></li>\n</ol>\n<p><br></p>\n<hr>\n<h3 id=\"section2\">Section 2</h3>\n<h4 id=\"booleanexpressions\">Boolean expressions</h4>\n<p><strong>… and variable assignment</strong></p>\n<p><strong>Code:</strong></p>\n<ul>\n<li>Using the provided variable definitions, replace the blanks (underscores) with a mathematical or boolean operator that evaluates the expression to <code>true</code> (some may have more than one right answer, just choose one)</li>\n<li>Test your answers by using <code>console.log</code> for each expression in your answer file.</li>\n</ul>\n<pre><code class=\"js language-js\">  const a = 4;\n  const b = 53;\n  const c = 57;\n  const d = 16;\n  const e = 'Kelvin';\n  const f = false;\n</code></pre>\n<ul>\n<li><p>a _ b</p></li>\n<li><p>c _ d</p></li>\n<li><p>'Name' _ 'Name'</p></li>\n<li><p>a _ b _ c</p></li>\n<li><p>a _ a _ d</p></li>\n<li><p>e _ 'Kevin'</p></li>\n<li><p>48 _ '48'</p></li>\n<li><p>f _ e</p></li>\n<li><p>Set a new variable <code>g</code> to <code>0</code></p></li>\n<li><p>console.log <code>g</code></p></li>\n<li><p>Then set the variable <code>g</code> to be equal to <code>b + c</code></p></li>\n<li><p>console.log <code>g</code></p></li>\n<li><p><strong>Answer:</strong></p></li>\n<li><p>Did you use <code>const</code>, <code>let</code> or <code>var</code>? Why did you choose the one you chose?</p></li>\n<li><p>What happens if you don't use <code>const</code>, <code>let</code> or <code>var</code>? Do you get an error? If so what does it say?</p></li>\n<li><p>what happens if you write <code>10 = g</code>?</p></li>\n</ul>\n<p><strong>Bonus Challenge (optional):</strong>\nReplace the underscores to make a Boolean expression that evaluates to true. Use no more than one of the following: <code>&gt;</code> , <code>&lt;</code> <code>!==</code> and <code>===</code>.</p>\n<pre><code>a _ (b || f) _ !f &amp;&amp; e _ c\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Bonus hint</a></p>\n<p><br></p>\n<hr>\n<h3 id=\"section3\">Section 3</h3>\n<h4 id=\"whileloops\">While loops</h4>\n<p>Increase your <strong>code literacy</strong> by reading code, line by line.</p>\n<h4 id=\"infiniteloop\">Infinite loop?</h4>\n<p>Read the following code very carefully.</p>\n<p><strong>DO NOT RUN</strong> the code because it <em>might</em> run an <strong>infinite loop</strong></p>\n<p>Infinite loops can sometimes be hard to stop and may require you to reboot your computer. Being able to determine whether you've created an infinite loop <em>before</em> running your code is a handy skill to have</p>\n<p><strong>Answer:</strong></p>\n<ul>\n<li>Is the code below an infinite loop? Why or why not?</li>\n<li>Don't worry about getting it 'wrong' - you'll be graded on your reasoning, not if your ultimate answer is correct.</li>\n</ul>\n<p>You should <strong>NOT</strong> test (run) this code, so read it line by line and 'execute' the code in your head.</p>\n<pre><code class=\"js language-js\">while (true) {\n    console.log('Do not run this loop');\n}\n</code></pre>\n<h4 id=\"infiniteloopii\">Infinite loop II</h4>\n<ul>\n<li>is this loop an infinite loop? Why or why not?</li>\n</ul>\n <!---  [comment]: <> (`const` will throw an error - let the students spot this)-->\n<pre><code class=\"js language-js\">const runProgram = true;\n\nwhile (runProgram) {\n    console.log('Do not run this loop');\n    runProgram = false;\n}\n</code></pre>\n<p><strong>Answer:</strong></p>\n<p>Infinite or not infinite? What is the expected output?</p>\n<h4 id=\"readingcode\">Reading code</h4>\n<p>Ok rest easy, no more infinite loops for now!</p>\n<p>The following while loop uses a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\">compound assignment</a> operator, i.e. <code>+=</code></p>\n<p><em>Without running this loop</em>, what is the expected output?</p>\n<p>Read the code line by line-- everything happens in sequence. Write down what you think the code will log in the Terminal by adding comments before each line of code, explaining what that line of code will do. Be patient with your thought! There is no rush.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"js language-js\">let q = 20;\n\n// start a while loop that will run as long as\n// q is greater than 10\nwhile (q &gt; 10){\n  // prints the value of q to the screen/Terminal window\n  console.log(q)\n  // decrements the value of q by 1\n  q--\n// closes the while loop, the code inside this loop will keep running\n//until the while condition is evaluated to false\n}\n</code></pre>\n<p><strong>Code:</strong></p>\n<pre><code class=\"js language-js\">let letters = \"A\";\nlet i = 0;\n\nwhile (i &lt; 20) {\n    letters += \"A\";\n    i++;\n}\n\nconsole.log(letters);\n</code></pre>\n<ul>\n<li>Copy the above code into your <code>.js</code> file</li>\n<li>Add a comment for each line, like the above example</li>\n<li>Write a comment with your expected result</li>\n<li>Run the code</li>\n<li>Write another sentence confirming whether the code was what you expected. If it isn't what you expected, don't change what you wrote about your expected result. Rather write one sentence explaining what you learned. Remember the goals are to learn how to code, how to think critically, how to fix bugs, and learn from mistakes. <a href=\"https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/\">Try to adapt to the growth mindset</a> (Bonus reading)</li>\n</ul>\n<p><br></p>\n<hr>\n<h3 id=\"section4\">Section 4</h3>\n<h4 id=\"forloops\">For loops</h4>\n<p><strong>Answer:</strong></p>\n<ul>\n<li>A for loop performs the same operation as a while loop. But what are the key differences, if any? What are the similarities?</li>\n</ul>\n<h4 id=\"forloopcontrolpanel\">For loop control panel</h4>\n<p>Here is an example for loop that prints a message 100 times:</p>\n<pre><code class=\"js language-js\">for (let i = 0; i &lt; 100; i++) {\n    console.log('Without you, today\\'s emotions are the scurf of yesterday\\'s');\n}\n</code></pre>\n<p><strong>Answer:</strong></p>\n<p>What are the three components of the <strong>control panel</strong>? Each component is separated by a semicolon <code>;</code>.</p>\n<p>Remember: Write your answers as comments in the file.</p>\n<ul>\n<li>The first part of the control panel is:</li>\n<li>The second part of the control panel is:</li>\n<li>The third part of the control panel is:</li>\n</ul>\n<h4 id=\"forloopii\">For loop II</h4>\n<p>Write a for loop that will console.log the numbers 0 to 999.</p>\n<p><strong>Bonus Challenge (optional):</strong></p>\n<p>What is the difference between <code>\\</code> (<code>backslash</code>, above the <code>enter</code>/<code>return</code> key) and <code>/</code> (<code>forward slash</code> or just <code>slash</code>, shares the key with the <code>?</code>)?\nWhat is <code>\\</code> doing in the string?</p>\n<pre><code class=\"js language-js\">  console.log('Without you, today\\'s emotions are the scurf of yesterday\\'s');\n</code></pre>\n<pre><code class=\"js language-js\">  console.log(\"Without you, today's emotions are the scurf of yesterday's\");\n</code></pre>\n<h4 id=\"forloopinreverse\">For loop in reverse</h4>\n<p><strong>Code:</strong></p>\n<p>Using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\">postfix operator</a> <code>i--</code> instead of <code>i++</code>, write a <em>for</em> loop that iterates in <em>reverse</em>. Console.log a countdown from 999 to 0.</p>\n<h4 id=\"morecounting\">More counting</h4>\n<p>Write a <em>for</em> loop that uses <strong>string concatenation</strong> to send a message to the console as well as the current value of <code>i</code>.</p>\n<p>The loop should run from 1 to 10.</p>\n<p>Expected Result:</p>\n<pre><code class=\"bash language-bash\">The value of i is: 1 of 10\nThe value of i is: 2 of 10\nThe value of i is: 3 of 10\nThe value of i is: 4 of 10\nThe value of i is: 5 of 10\nThe value of i is: 6 of 10\nThe value of i is: 7 of 10\nThe value of i is: 8 of 10\nThe value of i is: 9 of 10\nThe value of i is: 10 of 10\n</code></pre>\n<p><strong>Bonus Challenge (optional):</strong></p>\n<p>Rewrite the above loop using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">String Interpolation/Template Literals</a> instead of <strong>concatenation</strong></p>\n<p>Note: string interpolation uses <code>backticks</code>, this is a different character than a single quote. The <code>backtick</code> can usually be found above the left <code>tab</code> key/below the <code>esc</code> key and it shares it with the <code>tilda</code> <code>~</code></p>\n<h2 id=\"iteration\">Iteration</h2>\n<pre><code class=\"js language-js\">const StarWars = [\"Han\", \"C3PO\", \"R2D2\", \"Luke\", \"Leia\", \"Anakin\"];\n</code></pre>\n<ul>\n<li><p>Iterate over the <code>StarWars</code> array and print each element to the console.</p></li>\n<li><p>Iterate over the <code>StarWars</code> array again and print each character's name <strong>as well as</strong> the value of <code>i</code>.</p></li>\n</ul>\n<p><strong>Bonus Challenge (optional):</strong></p>\n<ul>\n<li>Figure out how to iterate over <strong>every second</strong> element of the <code>StarWars</code> array, starting with the first element.</li>\n</ul>\n<blockquote>\n  <p>=&gt; Han, R2D2, Leia</p>\n</blockquote>\n<p><br></p>\n<hr>\n<h3 id=\"section5\">Section 5</h3>\n<h4 id=\"terminalpractice\">Terminal Practice</h4>\n<p>Write the answer to each command at the bottom your <code>terminal_homework.bash</code>\nYou can copy a template of each command prompt from the <code>first_bash_instructions.bash</code> file and then copy paste your answers below each prompt</p>\n<h4 id=\"episodexanewterminal\">Episode X: A New Terminal</h4>\n<p>A long time ago in a unix environment far, far away, young Jedi padawans who\nknew only of desktop software were seduced by the dark side of the Force to\nenter… The Terminal.</p>\n<p>Follow the instructions below using all the console commands introduced in\nFundamentals, class, or that you find on your own.</p>\n<p>You can do each prompt/command one by one or</p>\n<p><strong>Bonus Challenges (Optional)</strong></p>\n<p>Try doing the following:</p>\n<ul>\n<li>Try applying one command to multiple files at once.</li>\n<li>Try applying one command to <strong>all</strong> files in a single directory (where necessery)</li>\n<li>Try applying one command to <strong>all files that match a pattern</strong>.</li>\n<li>Find and use command line shortcuts.</li>\n<li>Try using a mix of absolute and relative paths (there is a section on absolute pathing in today's Terminal lesson markdown).</li>\n</ul>\n<h4 id=\"partisetthescene\">Part I: Set the Scene</h4>\n<p><strong>Code and Copy your working code into the <code>terminal_homework.bash</code></strong> file</p>\n<ul>\n<li><p>Open the <strong>Terminal app</strong></p></li>\n<li><p>Create a new directory on your <code>Desktop</code> called <code>galaxy_far_far_away</code> and enter it via terminal</p></li>\n<li><p>Create a directory called <code>death_star</code>, and make the following files inside of it:</p></li>\n<li><p><strong>darth_vader.txt</strong></p></li>\n<li><p><strong>princess_leia.txt</strong></p></li>\n<li><p><strong>storm_trooper.txt</strong></p></li>\n<li><p>In <code>galaxy_far_far_away</code>, make a directory named <code>tatooine</code> and create the following files in it:</p></li>\n<li><p><strong>luke.txt</strong></p></li>\n<li><p><strong>ben_kenobi.txt</strong></p></li>\n<li><p>Inside of <strong>tatooine</strong> make a directory called <code>millenium_falcon</code>, and in it create:</p></li>\n<li><p><strong>han_solo.txt</strong></p></li>\n<li><p><strong>chewbaca.txt</strong></p></li>\n</ul>\n<p><br></p>\n<h4 id=\"partiimvrename\">Part II: mv - rename</h4>\n<p>You can rename a file using the <code>mv</code> command.</p>\n<p>For example, rename <code>file1.txt</code> to <code>file2.txt</code></p>\n<pre><code class=\"bash language-bash\">mv file1.txt file2.txt\n</code></pre>\n<ul>\n<li>Rename <strong>ben<em>kenobi.txt</strong> to <strong>obi</em>wan.txt</strong>.</li>\n</ul>\n<p><br></p>\n<h4 id=\"partiicpcopy\">Part II: cp - copy</h4>\n<p>You can copy a file from one location to another using the <code>cp</code> command.</p>\n<p>For example, copy <strong>file1.txt</strong> to its parent directory:</p>\n<pre><code class=\"bash language-bash\">cp file1.txt ..\n</code></pre>\n<p>And, copy <strong>file1.txt</strong> to a sibling directory:</p>\n<pre><code class=\"bash language-bash\">cp file1.txt ../some_directory\n</code></pre>\n<p>Finally, copy <strong>file1.txt</strong> to a child directory:</p>\n<pre><code class=\"bash language-bash\">cp file1.txt some_directory\n</code></pre>\n<ul>\n<li>Copy <strong>storm<em>trooper.txt</strong> from <strong>death</em>star</strong> to <strong>tatooine</strong></li>\n</ul>\n<p><br></p>\n<h4 id=\"partivmvmove\">Part IV: mv - move</h4>\n<p>You can use the <code>mv</code> command to move files from one location to another</p>\n<p>For example, move a file from its current location to the parent directory:</p>\n<pre><code class=\"bash language-bash\">mv file1.txt ..\n</code></pre>\n<p>And, move a file from its current location to a sibling directory:</p>\n<pre><code class=\"bash language-bash\">mv file1.txt ../some_directory\n</code></pre>\n<p>Finally, move a file from its current location to a child directory:</p>\n<pre><code class=\"bash language-bash\">mv file1.txt some_directory\n</code></pre>\n<p>You can also move directories into other directories using the same syntax</p>\n<ul>\n<li><p>Move <strong>luke.txt</strong> and <strong>obi_wan.txt</strong> to the <code>millenium_falcon</code></p></li>\n<li><p>Move <code>millenium_falcon</code> out of <code>tatooine</code> and into <code>galaxy_far_far_away</code></p></li>\n<li><p>Move <code>millenium_falcon</code> into <code>death_star</code></p></li>\n<li><p>Move <strong>princess_leia.txt</strong> into the <code>millenium_falcon</code></p></li>\n</ul>\n<p><br></p>\n<h4 id=\"partvrmremove\">Part V: rm - remove</h4>\n<p>You can use <code>rm</code> to delete a file.</p>\n<p>For example, delete a file:</p>\n<pre><code class=\"bash language-bash\">rm file1.txt\n</code></pre>\n<ul>\n<li>Delete <strong>obi_wan.txt</strong></li>\n</ul>\n<p><br></p>\n<h4 id=\"partvialltogether\">Part VI: all together</h4>\n<ul>\n<li><p>In <code>galaxy_far_far_away</code>, make a directory called <code>yavin_4</code></p></li>\n<li><p>Move the <code>millenium_falcon</code> out of the <code>death_star</code> and into <code>yavin_4</code></p></li>\n<li><p>Make a directory in <code>yavin_4</code> called <code>x_wing</code></p></li>\n<li><p>Move <strong>princess_leia.txt</strong> to <code>yavin_4</code> and <strong>luke.txt</strong> to <code>x_wing</code></p></li>\n<li><p>Move the <code>millenium_falcon</code> and <code>x_wing</code> out of <code>yavin_4</code> and into <code>galaxy_far_far_away</code></p></li>\n<li><p>In <code>death_star</code>, create directories for <code>tie_fighter_1</code>, <code>tie_fighter_2</code> and <code>tie_fighter_3</code></p></li>\n<li><p>Move <strong>darth_vader.txt</strong> into <code>tie_fighter_1</code></p></li>\n<li><p>Make a copy of <strong>storm_trooper.txt</strong> in both <code>tie_fighter_2</code> and <code>tie_fighter_3</code></p></li>\n<li><p>Move all of the <code>tie_fighters</code> out of the <code>death_star</code> and into <code>galaxy_far_far_away</code></p></li>\n</ul>\n<p><br></p>\n<h4 id=\"partviirmrremovedirectories\">Part VII: rm -r - remove directories</h4>\n<p><strong>Be careful with this command - cannot undo!</strong></p>\n<p>Make sure you delete the right thing, or you could accidentally delete the contents of your computer (it has happened).</p>\n<p>This command will typically not ask you if you really want to delete. It will just delete . . .</p>\n<ul>\n<li>Remove <strong>tie_fighters</strong> 2 and 3.</li>\n</ul>\n<h4 id=\"partviiithefinalact\">Part VIII: The Final Act</h4>\n<ul>\n<li><p>Touch a file in <code>x_wing</code> called <strong>the_force.txt</strong></p></li>\n<li><p>Destroy the <code>death_star</code> and anyone inside of it.</p></li>\n<li><p>Return <code>x_wing</code> and the <code>millenium_falcon</code> to <code>yavin_4</code></p></li>\n<li><p>Celebrate!</p></li>\n</ul>\n<p><br></p>\n<p><br></p>\n<h3 id=\"hungryformore\">Hungry for More</h3>\n<p>With every homework, we'll add a challenge section that is optional. These sections will help you grow and solidify concepts. Homework should take about 4 hours, if you have completed hw in less than 4 hours you are strongly encouraged to work on this section. If homework is taking longer than 4 hours, it is better to skip this section and rest so you are ready for the next day</p>\n<p><a href=\"https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/\">Read about Fixed vs. Growth Mindset</a></p>\n<p><a href=\"https://eloquentjavascript.net/\">Explore online resources like Eloquent JavaScript</a></p>\n<p><br></p>\n<hr>\n<h1 id=\"homeworksubmission\">Homework submission</h1>\n<p>Tomorrow we'll spend more time with Git and how to use it for homework submission. For tonights homework just create a new github gist (think of it as a one file git repo) and copy and paste your work into there and then submit the link via the homework submission form.</p>\n<ul>\n<li><a href=\"https://gist.github.com/\">Github Gist</a></li>\n</ul>","data":{"title":"W01D2","subTitle":"An Introduction to Functions in JavaScript (In Progress)","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/functions-the-first-frontier.png","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/hello.md","_id":"hello"}]