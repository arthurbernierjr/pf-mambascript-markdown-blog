{"content":"<h1 id=\"pokeexpress\">Poke Express</h1>\n<p><img src=\"https://i.imgur.com/rRKtN1B.jpg\" alt=\"\" /></p>\n<p>Make a Pokemon app that displays data inside server-side rendered views.</p>\n<h4 id=\"learningobjectives\">Learning Objectives</h4>\n<ul>\n<li>Practicing index and show routes with express</li>\n</ul>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>JavaScript</li>\n<li>Express</li>\n<li>Node</li>\n<li>JSX</li>\n</ul>\n<hr />\n<h2 id=\"theuserstories\">The User Stories</h2>\n<ul>\n<li>When a user goes to the <code>/pokemon</code> route they will see an <code>index</code> of pokemon: the names of each pokemon rendered to the page.</li>\n<li>When a user clicks on the name of the pokemon, they will be taken to that pokemon's <code>show</code> page, and will see the pokemon's name and image.</li>\n</ul>\n<h2 id=\"letsstartcatchingemall\">Let's Start Catching 'em All!</h2>\n<h3 id=\"setupthefilestructure\">Set up the file structure</h3>\n<p><strong>In terminal 1 at a time:</strong></p>\n<ul>\n<li><p>inside your homework folder:</p></li>\n<li><p><code>mkdir pokemon_app</code></p></li>\n<li><p><code>cd pokemon_app</code></p></li>\n<li><p><code>mkdir views</code></p></li>\n<li><p><code>touch views/Index.jsx</code></p></li>\n<li><p><code>touch views/Show.jsx</code></p></li>\n<li><p><code>mkdir models</code></p></li>\n<li><p><code>touch models/pokemon.js</code></p></li>\n<li><p><code>touch server.js</code></p></li>\n<li><p><code>touch .gitignore</code></p></li>\n<li><p><code>npm init -y</code></p></li>\n<li><p><details><summary>Approximate File Structure</summary></p>\n<p><img src=\"https://i.imgur.com/qQOzEFR.png\" alt=\"file structure image\" /></p>\n<p>**IMPORTANT! This image is a rough outline for you to double check which main folders should be nested or on the same level. If you just have one file, it could be argued that you don't need a folder for it. But as your apps grow, you'll need to get more organized and definitely use folders. Be consistent and adjust your routing, as needed.</p></li>\n</ul>\n<p></details></p>\n<p><hr>\n&#x1F534; Commit: <br>\n\"All my files are created\"</p>\n<hr>\n<h3 id=\"installnpmpackages\">Install NPM packages</h3>\n<p><strong>In terminal:</strong></p>\n<ul>\n<li><p>Make sure that you are on the same directory level as your <code>package.json</code> (why?)</p></li>\n<li><p><code>npm i express</code></p></li>\n<li><p><code>npm i express-react-views react@16 react-dom@16</code></p></li>\n<li><p>check your <code>package.json</code></p></li>\n<li><p><details><summary>Approximate package.json</summary></p>\n<p><img src=\"https://i.imgur.com/EizWG5y.png\" alt=\"package.json\" /></p></li>\n</ul>\n<p></details></p>\n<p><hr>\n&#x1F534; Commit: <br>\n\"All my npm packages are added\"</p>\n<hr>\n<h3 id=\"setupyourserver\">Set up your server</h3>\n<p>-<strong>In your <code>server.js</code> file, set up your server</strong></p>\n<ul>\n<li>require express</li>\n<li>set <code>express()</code> to a variable</li>\n<li>set a variable of <code>port</code> to <code>3000</code></li>\n<li>set your app to listen to the port and include a <code>console.log()</code>, so that you can tell when your server is running</li>\n<li>include a get route <code>/</code> that will <code>res.send('Welcome to the Pokemon App!');</code> so that when you got to <code>localhost:3000</code>, you will see <code>Welcome to the Pokemon App!</code></li>\n<li><strong>In terminal</strong></li>\n<li><code>nodemon</code> or <code>nodemon server.js</code> (if you set your <code>package.json</code> to start <code>server.js</code> you do't need to put it after <code>nodemon</code> )<ul>\n<li><strong>GOTCHA!</strong> : <code>nodemon</code> will only work if you run it from the same location as your <code>package.json</code></li></ul></li>\n<li><strong>In the browser</strong></li>\n<li>go to <code>localhost:3000</code></li>\n<li>check that you have your <code>Welcome to the Pokemon App!</code> message displaying</li>\n</ul>\n<p><hr>\n &#x1F534; Commit: <br>\n \"My server is set up and running\"</p>\n<hr>\n<h3 id=\"setupyour_database_\">Set up your <em>'database'</em></h3>\n<ul>\n<li>You have created a file called <code>pokemon.js</code></li>\n<li>Inside of this file, put the following array of pokemon objects. This is your 'database' for tonight's homework, copy and paste it <strong>as is</strong>! You'll notice the image url's are missing something, this is <em>intentional</em>, do not edit anything directly inside the 'database'!</li>\n</ul>\n<pre><code class=\"js language-js\">const pokemon = [\n            {name: \"bulbasaur\", img: \"http://img.pokemondb.net/artwork/bulbasaur\"},\n            {name: \"ivysaur\", img: \"http://img.pokemondb.net/artwork/ivysaur\"},\n            {name: \"venusaur\", img: \"http://img.pokemondb.net/artwork/venusaur\"},\n            {name: \"charmander\", img: \"http://img.pokemondb.net/artwork/charmander\"},\n            {name: \"charizard\", img: \"http://img.pokemondb.net/artwork/charizard\"},\n            {name: \"squirtle\", img: \"http://img.pokemondb.net/artwork/squirtle\"},\n            {name: \"wartortle\", img: \"http://img.pokemondb.net/artwork/wartortle\"}\n         ];\n</code></pre>\n<ul>\n<li>Set up your 'database' so that it can be exported to your <code>server.js</code> and then be required by your <code>server.js</code></li>\n<li>Set this 'database' to a variable called <code>pokemon</code> in your <code>server.js</code> file</li>\n<li>Create a get route <code>/pokemon</code> that will <code>res.send(pokemon)</code>, which will display your pokemon data as json in the browser</li>\n</ul>\n<p><hr>\n&#x1F534; Commit: <br>\n\"Connected my database, can see json in the browser\"</p>\n<hr>\n<h3 id=\"setupyourindexview\">Set up your index view</h3>\n<ul>\n<li><p>Instead of displaying json at your <code>/pokemon</code> route, you should serve the <code>Index.jsx</code> file you created that will display your pokemon</p></li>\n<li><p>You will have to set up your jsx file</p></li>\n<li><p>Start with your html boilerplate code</p></li>\n<li><p>Add an <code>&lt;h1&gt;</code> that describes this page, i.e. 'See All The Pokemon!'</p></li>\n<li><p>Try adding some inline styles:</p>\n<ul>\n<li>We can add inline CSS, which are specified as attributes and are passed to the elements. These are specified as an object with a key as camelCased style name &amp; value being the actual style value (and not as a string).</li></ul>\n<pre><code class=\"js language-js\">  const myStyle = {\n    color: '#ffffff',\n    backgroundColor: '#000000',\n  };\n\n  class MyFirstComponent extends React.Component() {\n    return (\n      &lt;div style={myStyle}&gt;My First React Component!&lt;/div&gt;;\n    }\n  }\n</code></pre></li>\n<li><p>Change your <code>/pokemon</code> route to <code>res.render</code> your <code>Index.jsx</code> file</p></li>\n<li><p>In your browser, go to <code>localhost:3000/pokemon</code> and be sure to see your <code>Index.jsx</code> view with an <code>h1</code> tag</p></li>\n</ul>\n<p><hr>\n  &#x1F534; Commit: <br>\n  \"index.jsx view rendered at pokemon route\"</p>\n<hr>\n<h3 id=\"setupyourindexviewtoshowyourpokemondata\">Set up your index view to show your pokemon data</h3>\n<ul>\n<li>Continue working on your <code>Index.jsx</code> view so that you can see:</li>\n<li>The name of each pokemon, as a list item, inside an unordered list</li>\n<li>This list should be dynamically rendered by jsx based on your data from your 'database'</li>\n<li>You'll notice the pokemon names aren't properly capitalized! Let's fix that! Manipulate the data <strong>programatically</strong> to capitalize the first letter of their names</li>\n</ul>\n<p><hr>\n    &#x1F534; Commit: <br>\n    \"I can view a list of all my pokemon in the browser\"</p>\n<hr>\n<h3 id=\"settingupyourshowroute\">Setting up your show route</h3>\n<ul>\n<li>Inside your <code>server.js</code>, add a new get route <code>/pokemon/:id</code></li>\n<li>That will <code>res.send(req.params.id);</code></li>\n<li>So, when you go to <code>localhost:3000/pokemon/whatever</code></li>\n<li><code>whatever</code> will show up in the browser</li>\n</ul>\n<p><hr>\n   &#x1F534; Commit: <br>\n   \"Show view shows req.params.id \"</p>\n<hr>\n<h3 id=\"linkyourindexjsxtoyourshowjsx\">Link your <code>Index.jsx</code> to your <code>Show.jsx</code></h3>\n<ul>\n<li>Inside your <code>Index.jsx</code>,</li>\n<li>For each pokemon, add an <code>&lt;a&gt;</code> tag that will have an <code>href</code> that goes to the route <code>/pokemon/x</code>, where x is the array position of the <code>pokemon</code> in the data array. This should be set dynamically with jsx</li>\n<li>When you click the link you should go to your show route and the index number corresponding to the pokemon's array position should be displayed</li>\n</ul>\n<p><hr>\n   &#x1F534; Commit: <br>\n   \"Added dynamic anchor tags to index.jsx \"</p>\n<hr>\n<h3 id=\"renderyourindividualpokemonintheshowview\">Render your individual pokemon in the show view</h3>\n<ul>\n<li>Copy/paste your code from your <code>Index.jsx</code>  into your Sshow.jsx`</li>\n<li>Change all your html code inside your <code>Show.jsx</code> file so that<ul>\n<li>Your h1 tag says \"Gotta Catch 'Em All\"</li>\n<li>Add an h2 tag that will display the name of the pokemon</li>\n<li>Add an image tag that will display an image of the pokemon</li>\n<li>Add an anchor tag with the text of <code>back</code>, that will take you back to your <code>Index.jsx</code> view</li></ul></li>\n<li>Update the route in the server.js to render the show view with the pokemon data</li>\n<li>Oh no! The image is broken because in our database the image links don't have the <code>.jpg</code> ending, let's fix that <strong>programatically</strong>! <em>Without</em> going back to the database and editing it there, add on <code>.jpg</code> to the end of the pokemon's image data</li>\n</ul>\n<p><hr>\n  &#x1F534; Commit: <br>\n  \"Created show views of each pokemon\"</p>\n<hr>\n<h2 id=\"hungryformore\">Hungry for More?</h2>\n<ol>\n<li>Learn about express static in order to learn how to link a css file to your app (we'll be covering it tomorrow, but if you're interested in looking into it now: <a href=\"https://expressjs.com/en/starter/static-files.html\">read those docs!</a> Go ahead and dive right in!  Style your application with Bootstrap or any other CSS framework! Or really jazz up your app by adding some hand-rolled flourishes with css animations, jQuery and more!</li>\n<li>Sign up for <a href=\"https://www.codewars.com/\">Code Wars</a> and try out a challenge (or a few!) in order to keep honing your JavaScript skills!</li>\n</ol>","data":{"title":"w1d4","subTitle":"An Introduction to the world","excerpt":"God is Good 3 appears on Index Page","featureImage":"/img/illustration-editor-desktop.svg","date":"10/21/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/pf-ms-md-blog/api/w1d4.md","_id":"w1d4"}